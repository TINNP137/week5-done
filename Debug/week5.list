
week5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003968  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b20  08003b20  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003b20  08003b20  00013b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b28  08003b28  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b2c  08003b2c  00013b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  20000010  08003b3c  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08003b3c  000201bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af94  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ab8  00000000  00000000  0002afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb0  00000000  00000000  0002ca88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae8  00000000  00000000  0002d638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015687  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aed3  00000000  00000000  000437a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c72  00000000  00000000  0004e67a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d72ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  000d7340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003ae8 	.word	0x08003ae8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	08003ae8 	.word	0x08003ae8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b5b0      	push	{r4, r5, r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc35 	bl	8000d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83f 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f987 	bl	80007f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004e2:	f000 f965 	bl	80007b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80004e6:	f000 f939 	bl	800075c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80004ea:	f000 f89f 	bl	800062c <MX_TIM1_Init>
  MX_TIM11_Init();
 80004ee:	f000 f911 	bl	8000714 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  	  //start Microsec timer
	HAL_TIM_Base_Start_IT(&htim11);
 80004f2:	4815      	ldr	r0, [pc, #84]	; (8000548 <main+0x78>)
 80004f4:	f001 ff8d 	bl	8002412 <HAL_TIM_Base_Start_IT>
	//start Input capture in DMA
	HAL_TIM_Base_Start(&htim1);
 80004f8:	4814      	ldr	r0, [pc, #80]	; (800054c <main+0x7c>)
 80004fa:	f001 ff66 	bl	80023ca <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_DMA(&htim1, TIM_CHANNEL_1, (uint32_t*)capturedata,
 80004fe:	2310      	movs	r3, #16
 8000500:	4a13      	ldr	r2, [pc, #76]	; (8000550 <main+0x80>)
 8000502:	2100      	movs	r1, #0
 8000504:	4811      	ldr	r0, [pc, #68]	; (800054c <main+0x7c>)
 8000506:	f001 ffdd 	bl	80024c4 <HAL_TIM_IC_Start_DMA>
			CAPTURENUM);
	uint64_t timestamp =0;
 800050a:	f04f 0200 	mov.w	r2, #0
 800050e:	f04f 0300 	mov.w	r3, #0
 8000512:	e9c7 2300 	strd	r2, r3, [r7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		//read Time of encoder
		encoderSpeedReaderCycle();
 8000516:	f000 f9eb 	bl	80008f0 <encoderSpeedReaderCycle>

		if(micros()-timestamp > 1000000)
 800051a:	f000 fa3f 	bl	800099c <micros>
 800051e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000522:	1a84      	subs	r4, r0, r2
 8000524:	eb61 0503 	sbc.w	r5, r1, r3
 8000528:	4a0a      	ldr	r2, [pc, #40]	; (8000554 <main+0x84>)
 800052a:	f04f 0300 	mov.w	r3, #0
 800052e:	42ab      	cmp	r3, r5
 8000530:	bf08      	it	eq
 8000532:	42a2      	cmpeq	r2, r4
 8000534:	d2ef      	bcs.n	8000516 <main+0x46>
		{
			timestamp = micros();
 8000536:	f000 fa31 	bl	800099c <micros>
 800053a:	e9c7 0100 	strd	r0, r1, [r7]
			HAL_GPIO_TogglePin(LD2_GPIO_Port,LD2_Pin);
 800053e:	2120      	movs	r1, #32
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <main+0x88>)
 8000542:	f001 fa90 	bl	8001a66 <HAL_GPIO_TogglePin>
		encoderSpeedReaderCycle();
 8000546:	e7e6      	b.n	8000516 <main+0x46>
 8000548:	200000f8 	.word	0x200000f8
 800054c:	20000138 	.word	0x20000138
 8000550:	2000002c 	.word	0x2000002c
 8000554:	000f4240 	.word	0x000f4240
 8000558:	40020000 	.word	0x40020000

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	2230      	movs	r2, #48	; 0x30
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fab4 	bl	8003ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	f107 030c 	add.w	r3, r7, #12
 8000574:	2200      	movs	r2, #0
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	605a      	str	r2, [r3, #4]
 800057a:	609a      	str	r2, [r3, #8]
 800057c:	60da      	str	r2, [r3, #12]
 800057e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000580:	2300      	movs	r3, #0
 8000582:	60bb      	str	r3, [r7, #8]
 8000584:	4b27      	ldr	r3, [pc, #156]	; (8000624 <SystemClock_Config+0xc8>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	4a26      	ldr	r2, [pc, #152]	; (8000624 <SystemClock_Config+0xc8>)
 800058a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800058e:	6413      	str	r3, [r2, #64]	; 0x40
 8000590:	4b24      	ldr	r3, [pc, #144]	; (8000624 <SystemClock_Config+0xc8>)
 8000592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000598:	60bb      	str	r3, [r7, #8]
 800059a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800059c:	2300      	movs	r3, #0
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	4b21      	ldr	r3, [pc, #132]	; (8000628 <SystemClock_Config+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a20      	ldr	r2, [pc, #128]	; (8000628 <SystemClock_Config+0xcc>)
 80005a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005aa:	6013      	str	r3, [r2, #0]
 80005ac:	4b1e      	ldr	r3, [pc, #120]	; (8000628 <SystemClock_Config+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	607b      	str	r3, [r7, #4]
 80005b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b8:	2302      	movs	r3, #2
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c0:	2310      	movs	r3, #16
 80005c2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c4:	2302      	movs	r3, #2
 80005c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005c8:	2300      	movs	r3, #0
 80005ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005cc:	2308      	movs	r3, #8
 80005ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005d0:	2364      	movs	r3, #100	; 0x64
 80005d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005d8:	2304      	movs	r3, #4
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005dc:	f107 0320 	add.w	r3, r7, #32
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fa5b 	bl	8001a9c <HAL_RCC_OscConfig>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005ec:	f000 fa0e 	bl	8000a0c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f0:	230f      	movs	r3, #15
 80005f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005f4:	2302      	movs	r3, #2
 80005f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005f8:	2300      	movs	r3, #0
 80005fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	2103      	movs	r1, #3
 800060c:	4618      	mov	r0, r3
 800060e:	f001 fcb5 	bl	8001f7c <HAL_RCC_ClockConfig>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000618:	f000 f9f8 	bl	8000a0c <Error_Handler>
  }
}
 800061c:	bf00      	nop
 800061e:	3750      	adds	r7, #80	; 0x50
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	40023800 	.word	0x40023800
 8000628:	40007000 	.word	0x40007000

0800062c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b08a      	sub	sp, #40	; 0x28
 8000630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000632:	f107 0318 	add.w	r3, r7, #24
 8000636:	2200      	movs	r2, #0
 8000638:	601a      	str	r2, [r3, #0]
 800063a:	605a      	str	r2, [r3, #4]
 800063c:	609a      	str	r2, [r3, #8]
 800063e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800064a:	463b      	mov	r3, r7
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000656:	4b2d      	ldr	r3, [pc, #180]	; (800070c <MX_TIM1_Init+0xe0>)
 8000658:	4a2d      	ldr	r2, [pc, #180]	; (8000710 <MX_TIM1_Init+0xe4>)
 800065a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 800065c:	4b2b      	ldr	r3, [pc, #172]	; (800070c <MX_TIM1_Init+0xe0>)
 800065e:	2263      	movs	r2, #99	; 0x63
 8000660:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000662:	4b2a      	ldr	r3, [pc, #168]	; (800070c <MX_TIM1_Init+0xe0>)
 8000664:	2200      	movs	r2, #0
 8000666:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000668:	4b28      	ldr	r3, [pc, #160]	; (800070c <MX_TIM1_Init+0xe0>)
 800066a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800066e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <MX_TIM1_Init+0xe0>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000676:	4b25      	ldr	r3, [pc, #148]	; (800070c <MX_TIM1_Init+0xe0>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067c:	4b23      	ldr	r3, [pc, #140]	; (800070c <MX_TIM1_Init+0xe0>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000682:	4822      	ldr	r0, [pc, #136]	; (800070c <MX_TIM1_Init+0xe0>)
 8000684:	f001 fe76 	bl	8002374 <HAL_TIM_Base_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800068e:	f000 f9bd 	bl	8000a0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000692:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000696:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4619      	mov	r1, r3
 800069e:	481b      	ldr	r0, [pc, #108]	; (800070c <MX_TIM1_Init+0xe0>)
 80006a0:	f002 f9aa 	bl	80029f8 <HAL_TIM_ConfigClockSource>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80006aa:	f000 f9af 	bl	8000a0c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <MX_TIM1_Init+0xe0>)
 80006b0:	f001 fed3 	bl	800245a <HAL_TIM_IC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80006ba:	f000 f9a7 	bl	8000a0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c2:	2300      	movs	r3, #0
 80006c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	4619      	mov	r1, r3
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <MX_TIM1_Init+0xe0>)
 80006ce:	f002 fd73 	bl	80031b8 <HAL_TIMEx_MasterConfigSynchronization>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 80006d8:	f000 f998 	bl	8000a0c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006dc:	2300      	movs	r3, #0
 80006de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006e0:	2301      	movs	r3, #1
 80006e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80006ec:	463b      	mov	r3, r7
 80006ee:	2200      	movs	r2, #0
 80006f0:	4619      	mov	r1, r3
 80006f2:	4806      	ldr	r0, [pc, #24]	; (800070c <MX_TIM1_Init+0xe0>)
 80006f4:	f002 f8e4 	bl	80028c0 <HAL_TIM_IC_ConfigChannel>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80006fe:	f000 f985 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	20000138 	.word	0x20000138
 8000710:	40010000 	.word	0x40010000

08000714 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_TIM11_Init+0x40>)
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <MX_TIM11_Init+0x44>)
 800071c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_TIM11_Init+0x40>)
 8000720:	2263      	movs	r2, #99	; 0x63
 8000722:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000724:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_TIM11_Init+0x40>)
 8000726:	2200      	movs	r2, #0
 8000728:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_TIM11_Init+0x40>)
 800072c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000730:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <MX_TIM11_Init+0x40>)
 8000734:	2200      	movs	r2, #0
 8000736:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_TIM11_Init+0x40>)
 800073a:	2200      	movs	r2, #0
 800073c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_TIM11_Init+0x40>)
 8000740:	f001 fe18 	bl	8002374 <HAL_TIM_Base_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800074a:	f000 f95f 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200000f8 	.word	0x200000f8
 8000758:	40014800 	.word	0x40014800

0800075c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000760:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <MX_USART2_UART_Init+0x50>)
 8000764:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000766:	4b10      	ldr	r3, [pc, #64]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USART2_UART_Init+0x4c>)
 8000794:	f002 fd92 	bl	80032bc <HAL_UART_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800079e:	f000 f935 	bl	8000a0c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000178 	.word	0x20000178
 80007ac:	40004400 	.word	0x40004400

080007b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	607b      	str	r3, [r7, #4]
 80007ba:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_DMA_Init+0x3c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a0b      	ldr	r2, [pc, #44]	; (80007ec <MX_DMA_Init+0x3c>)
 80007c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_DMA_Init+0x3c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2039      	movs	r0, #57	; 0x39
 80007d8:	f000 fc01 	bl	8000fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80007dc:	2039      	movs	r0, #57	; 0x39
 80007de:	f000 fc1a 	bl	8001016 <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	; 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <MX_GPIO_Init+0xf0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a34      	ldr	r2, [pc, #208]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b32      	ldr	r3, [pc, #200]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b2e      	ldr	r3, [pc, #184]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <MX_GPIO_Init+0xf0>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b27      	ldr	r3, [pc, #156]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a26      	ldr	r2, [pc, #152]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b20      	ldr	r3, [pc, #128]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a1f      	ldr	r2, [pc, #124]	; (80008e0 <MX_GPIO_Init+0xf0>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <MX_GPIO_Init+0xf0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	481a      	ldr	r0, [pc, #104]	; (80008e4 <MX_GPIO_Init+0xf4>)
 800087c:	f001 f8da 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	4b18      	ldr	r3, [pc, #96]	; (80008e8 <MX_GPIO_Init+0xf8>)
 8000888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	4815      	ldr	r0, [pc, #84]	; (80008ec <MX_GPIO_Init+0xfc>)
 8000896:	f000 ff49 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089a:	2320      	movs	r3, #32
 800089c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089e:	2301      	movs	r3, #1
 80008a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	480c      	ldr	r0, [pc, #48]	; (80008e4 <MX_GPIO_Init+0xf4>)
 80008b2:	f000 ff3b 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80008b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008c8:	2301      	movs	r3, #1
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_GPIO_Init+0xf4>)
 80008d4:	f000 ff2a 	bl	800172c <HAL_GPIO_Init>

}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40023800 	.word	0x40023800
 80008e4:	40020000 	.word	0x40020000
 80008e8:	10210000 	.word	0x10210000
 80008ec:	40020800 	.word	0x40020800

080008f0 <encoderSpeedReaderCycle>:

/* USER CODE BEGIN 4 */
void encoderSpeedReaderCycle() {
 80008f0:	b490      	push	{r4, r7}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
	//get DMA Position form number of data
	uint32_t CapPos =CAPTURENUM -  __HAL_DMA_GET_COUNTER(htim1.hdma[TIM_DMA_ID_CC1]);
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <encoderSpeedReaderCycle+0x9c>)
 80008f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	f1c3 0310 	rsb	r3, r3, #16
 8000902:	603b      	str	r3, [r7, #0]
	uint32_t sum = 0 ;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]

	//calculate diff from all buffer
	for(register int i=0 ;i < CAPTURENUM-1;i++)
 8000908:	2400      	movs	r4, #0
 800090a:	e02b      	b.n	8000964 <encoderSpeedReaderCycle+0x74>
	{
		DiffTime[i]  = capturedata[(CapPos+1+i)%CAPTURENUM]-capturedata[(CapPos+i)%CAPTURENUM];
 800090c:	4622      	mov	r2, r4
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	4413      	add	r3, r2
 8000912:	3301      	adds	r3, #1
 8000914:	f003 030f 	and.w	r3, r3, #15
 8000918:	4a1d      	ldr	r2, [pc, #116]	; (8000990 <encoderSpeedReaderCycle+0xa0>)
 800091a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800091e:	4619      	mov	r1, r3
 8000920:	4622      	mov	r2, r4
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	4413      	add	r3, r2
 8000926:	f003 030f 	and.w	r3, r3, #15
 800092a:	4a19      	ldr	r2, [pc, #100]	; (8000990 <encoderSpeedReaderCycle+0xa0>)
 800092c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000930:	1acb      	subs	r3, r1, r3
 8000932:	4a18      	ldr	r2, [pc, #96]	; (8000994 <encoderSpeedReaderCycle+0xa4>)
 8000934:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		//time never go back, but timer can over flow , conpensate that
		if (DiffTime[i] <0)
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <encoderSpeedReaderCycle+0xa4>)
 800093a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800093e:	2b00      	cmp	r3, #0
 8000940:	da08      	bge.n	8000954 <encoderSpeedReaderCycle+0x64>
		{
			DiffTime[i]+=65535;
 8000942:	4b14      	ldr	r3, [pc, #80]	; (8000994 <encoderSpeedReaderCycle+0xa4>)
 8000944:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8000948:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800094c:	33ff      	adds	r3, #255	; 0xff
 800094e:	4a11      	ldr	r2, [pc, #68]	; (8000994 <encoderSpeedReaderCycle+0xa4>)
 8000950:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		}
		//Sum all 15 Diff
		sum += DiffTime[i];
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <encoderSpeedReaderCycle+0xa4>)
 8000956:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	4413      	add	r3, r2
 8000960:	607b      	str	r3, [r7, #4]
	for(register int i=0 ;i < CAPTURENUM-1;i++)
 8000962:	3401      	adds	r4, #1
 8000964:	2c0e      	cmp	r4, #14
 8000966:	ddd1      	ble.n	800090c <encoderSpeedReaderCycle+0x1c>
	}

	//mean all 15 Diff
	MeanTime =sum / (float)(CAPTURENUM-1);
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	ee07 3a90 	vmov	s15, r3
 800096e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000972:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 8000976:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <encoderSpeedReaderCycle+0xa8>)
 800097c:	edc3 7a00 	vstr	s15, [r3]
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bc90      	pop	{r4, r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20000138 	.word	0x20000138
 8000990:	2000002c 	.word	0x2000002c
 8000994:	2000004c 	.word	0x2000004c
 8000998:	20000088 	.word	0x20000088

0800099c <micros>:
uint64_t micros()
{
 800099c:	b4b0      	push	{r4, r5, r7}
 800099e:	af00      	add	r7, sp, #0
	return _micros + htim11.Instance->CNT;
 80009a0:	4b09      	ldr	r3, [pc, #36]	; (80009c8 <micros+0x2c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009a6:	4618      	mov	r0, r3
 80009a8:	f04f 0100 	mov.w	r1, #0
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <micros+0x30>)
 80009ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b2:	1884      	adds	r4, r0, r2
 80009b4:	eb41 0503 	adc.w	r5, r1, r3
 80009b8:	4622      	mov	r2, r4
 80009ba:	462b      	mov	r3, r5
}
 80009bc:	4610      	mov	r0, r2
 80009be:	4619      	mov	r1, r3
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bcb0      	pop	{r4, r5, r7}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	200000f8 	.word	0x200000f8
 80009cc:	20000090 	.word	0x20000090

080009d0 <HAL_TIM_PeriodElapsedCallback>:
//interupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009d0:	b4b0      	push	{r4, r5, r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
 if(htim == &htim11)
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80009dc:	4293      	cmp	r3, r2
 80009de:	d10c      	bne.n	80009fa <HAL_TIM_PeriodElapsedCallback+0x2a>
 {
	 _micros += 65535;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009e6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009ea:	f04f 0100 	mov.w	r1, #0
 80009ee:	1814      	adds	r4, r2, r0
 80009f0:	eb43 0501 	adc.w	r5, r3, r1
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80009f6:	e9c3 4500 	strd	r4, r5, [r3]
 }
}
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bcb0      	pop	{r4, r5, r7}
 8000a02:	4770      	bx	lr
 8000a04:	200000f8 	.word	0x200000f8
 8000a08:	20000090 	.word	0x20000090

08000a0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a10:	b672      	cpsid	i
}
 8000a12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000a14:	e7fe      	b.n	8000a14 <Error_Handler+0x8>
	...

08000a18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b0d      	ldr	r3, [pc, #52]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	607b      	str	r3, [r7, #4]
 8000a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	603b      	str	r3, [r7, #0]
 8000a3e:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	4a08      	ldr	r2, [pc, #32]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a48:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4a:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	603b      	str	r3, [r7, #0]
 8000a54:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a56:	2007      	movs	r0, #7
 8000a58:	f000 fab6 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	3708      	adds	r7, #8
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800

08000a68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08a      	sub	sp, #40	; 0x28
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
 8000a7c:	60da      	str	r2, [r3, #12]
 8000a7e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a44      	ldr	r2, [pc, #272]	; (8000b98 <HAL_TIM_Base_MspInit+0x130>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	d166      	bne.n	8000b58 <HAL_TIM_Base_MspInit+0xf0>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
 8000a8e:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a42      	ldr	r2, [pc, #264]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b40      	ldr	r3, [pc, #256]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a3b      	ldr	r2, [pc, #236]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b39      	ldr	r3, [pc, #228]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	4619      	mov	r1, r3
 8000ade:	4830      	ldr	r0, [pc, #192]	; (8000ba0 <HAL_TIM_Base_MspInit+0x138>)
 8000ae0:	f000 fe24 	bl	800172c <HAL_GPIO_Init>

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000ae4:	4b2f      	ldr	r3, [pc, #188]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000ae6:	4a30      	ldr	r2, [pc, #192]	; (8000ba8 <HAL_TIM_Base_MspInit+0x140>)
 8000ae8:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000aea:	4b2e      	ldr	r3, [pc, #184]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000aec:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8000af0:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000af2:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000af8:	4b2a      	ldr	r3, [pc, #168]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000afe:	4b29      	ldr	r3, [pc, #164]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b04:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b06:	4b27      	ldr	r3, [pc, #156]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b0c:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b14:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_CIRCULAR;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b18:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b1c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000b1e:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b24:	4b1f      	ldr	r3, [pc, #124]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000b2a:	481e      	ldr	r0, [pc, #120]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b2c:	f000 fa8e 	bl	800104c <HAL_DMA_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8000b36:	f7ff ff69 	bl	8000a0c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a19      	ldr	r2, [pc, #100]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b3e:	625a      	str	r2, [r3, #36]	; 0x24
 8000b40:	4a18      	ldr	r2, [pc, #96]	; (8000ba4 <HAL_TIM_Base_MspInit+0x13c>)
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2100      	movs	r1, #0
 8000b4a:	201a      	movs	r0, #26
 8000b4c:	f000 fa47 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b50:	201a      	movs	r0, #26
 8000b52:	f000 fa60 	bl	8001016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8000b56:	e01a      	b.n	8000b8e <HAL_TIM_Base_MspInit+0x126>
  else if(htim_base->Instance==TIM11)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_TIM_Base_MspInit+0x144>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d115      	bne.n	8000b8e <HAL_TIM_Base_MspInit+0x126>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	60bb      	str	r3, [r7, #8]
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0c      	ldr	r2, [pc, #48]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <HAL_TIM_Base_MspInit+0x134>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	2100      	movs	r1, #0
 8000b82:	201a      	movs	r0, #26
 8000b84:	f000 fa2b 	bl	8000fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000b88:	201a      	movs	r0, #26
 8000b8a:	f000 fa44 	bl	8001016 <HAL_NVIC_EnableIRQ>
}
 8000b8e:	bf00      	nop
 8000b90:	3728      	adds	r7, #40	; 0x28
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40010000 	.word	0x40010000
 8000b9c:	40023800 	.word	0x40023800
 8000ba0:	40020000 	.word	0x40020000
 8000ba4:	20000098 	.word	0x20000098
 8000ba8:	40026428 	.word	0x40026428
 8000bac:	40014800 	.word	0x40014800

08000bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b08a      	sub	sp, #40	; 0x28
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a19      	ldr	r2, [pc, #100]	; (8000c34 <HAL_UART_MspInit+0x84>)
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12b      	bne.n	8000c2a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a17      	ldr	r2, [pc, #92]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a10      	ldr	r2, [pc, #64]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000bf8:	f043 0301 	orr.w	r3, r3, #1
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <HAL_UART_MspInit+0x88>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0301 	and.w	r3, r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c0a:	230c      	movs	r3, #12
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c16:	2303      	movs	r3, #3
 8000c18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c1a:	2307      	movs	r3, #7
 8000c1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 0314 	add.w	r3, r7, #20
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	; (8000c3c <HAL_UART_MspInit+0x8c>)
 8000c26:	f000 fd81 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c2a:	bf00      	nop
 8000c2c:	3728      	adds	r7, #40	; 0x28
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40004400 	.word	0x40004400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020000 	.word	0x40020000

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b480      	push	{r7}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8c:	f000 f8ac 	bl	8000de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c98:	4803      	ldr	r0, [pc, #12]	; (8000ca8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000c9a:	f001 fd09 	bl	80026b0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000c9e:	4803      	ldr	r0, [pc, #12]	; (8000cac <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8000ca0:	f001 fd06 	bl	80026b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000138 	.word	0x20000138
 8000cac:	200000f8 	.word	0x200000f8

08000cb0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <DMA2_Stream1_IRQHandler+0x10>)
 8000cb6:	f000 facf 	bl	8001258 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000098 	.word	0x20000098

08000cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cc8:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SystemInit+0x28>)
 8000cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <SystemInit+0x28>)
 8000cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000cd8:	4b04      	ldr	r3, [pc, #16]	; (8000cec <SystemInit+0x28>)
 8000cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cde:	609a      	str	r2, [r3, #8]
#endif
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000cf6:	e003      	b.n	8000d00 <LoopCopyDataInit>

08000cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000cf8:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000cfe:	3104      	adds	r1, #4

08000d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d00:	480b      	ldr	r0, [pc, #44]	; (8000d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d02:	4b0c      	ldr	r3, [pc, #48]	; (8000d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d08:	d3f6      	bcc.n	8000cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d0c:	e002      	b.n	8000d14 <LoopFillZerobss>

08000d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d10:	f842 3b04 	str.w	r3, [r2], #4

08000d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d18:	d3f9      	bcc.n	8000d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d1a:	f7ff ffd3 	bl	8000cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f002 feb7 	bl	8003a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fbd5 	bl	80004d0 <main>
  bx  lr    
 8000d26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000d2c:	08003b30 	.word	0x08003b30
  ldr  r0, =_sdata
 8000d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d34:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d38:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d3c:	200001bc 	.word	0x200001bc

08000d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC_IRQHandler>
	...

08000d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d48:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_Init+0x40>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <HAL_Init+0x40>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d54:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <HAL_Init+0x40>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a0a      	ldr	r2, [pc, #40]	; (8000d84 <HAL_Init+0x40>)
 8000d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <HAL_Init+0x40>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <HAL_Init+0x40>)
 8000d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d6c:	2003      	movs	r0, #3
 8000d6e:	f000 f92b 	bl	8000fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f000 f808 	bl	8000d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d78:	f7ff fe4e 	bl	8000a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023c00 	.word	0x40023c00

08000d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d90:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <HAL_InitTick+0x54>)
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	4b12      	ldr	r3, [pc, #72]	; (8000de0 <HAL_InitTick+0x58>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	4619      	mov	r1, r3
 8000d9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da6:	4618      	mov	r0, r3
 8000da8:	f000 f943 	bl	8001032 <HAL_SYSTICK_Config>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e00e      	b.n	8000dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2b0f      	cmp	r3, #15
 8000dba:	d80a      	bhi.n	8000dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	6879      	ldr	r1, [r7, #4]
 8000dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc4:	f000 f90b 	bl	8000fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dc8:	4a06      	ldr	r2, [pc, #24]	; (8000de4 <HAL_InitTick+0x5c>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	e000      	b.n	8000dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000000 	.word	0x20000000
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000004 	.word	0x20000004

08000de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_IncTick+0x20>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	461a      	mov	r2, r3
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_IncTick+0x24>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4413      	add	r3, r2
 8000df8:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <HAL_IncTick+0x24>)
 8000dfa:	6013      	str	r3, [r2, #0]
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	200001b8 	.word	0x200001b8

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	200001b8 	.word	0x200001b8

08000e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e38:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e44:	4013      	ands	r3, r2
 8000e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5a:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <__NVIC_SetPriorityGrouping+0x44>)
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	60d3      	str	r3, [r2, #12]
}
 8000e60:	bf00      	nop
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00

08000e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e74:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <__NVIC_GetPriorityGrouping+0x18>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	0a1b      	lsrs	r3, r3, #8
 8000e7a:	f003 0307 	and.w	r3, r3, #7
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	db0b      	blt.n	8000eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	f003 021f 	and.w	r2, r3, #31
 8000ea4:	4907      	ldr	r1, [pc, #28]	; (8000ec4 <__NVIC_EnableIRQ+0x38>)
 8000ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eaa:	095b      	lsrs	r3, r3, #5
 8000eac:	2001      	movs	r0, #1
 8000eae:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
 8000ec2:	bf00      	nop
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	db0a      	blt.n	8000ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	490c      	ldr	r1, [pc, #48]	; (8000f14 <__NVIC_SetPriority+0x4c>)
 8000ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee6:	0112      	lsls	r2, r2, #4
 8000ee8:	b2d2      	uxtb	r2, r2
 8000eea:	440b      	add	r3, r1
 8000eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef0:	e00a      	b.n	8000f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	4908      	ldr	r1, [pc, #32]	; (8000f18 <__NVIC_SetPriority+0x50>)
 8000ef8:	79fb      	ldrb	r3, [r7, #7]
 8000efa:	f003 030f 	and.w	r3, r3, #15
 8000efe:	3b04      	subs	r3, #4
 8000f00:	0112      	lsls	r2, r2, #4
 8000f02:	b2d2      	uxtb	r2, r2
 8000f04:	440b      	add	r3, r1
 8000f06:	761a      	strb	r2, [r3, #24]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	e000e100 	.word	0xe000e100
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	; 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f003 0307 	and.w	r3, r3, #7
 8000f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	f1c3 0307 	rsb	r3, r3, #7
 8000f36:	2b04      	cmp	r3, #4
 8000f38:	bf28      	it	cs
 8000f3a:	2304      	movcs	r3, #4
 8000f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	3304      	adds	r3, #4
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	d902      	bls.n	8000f4c <NVIC_EncodePriority+0x30>
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3b03      	subs	r3, #3
 8000f4a:	e000      	b.n	8000f4e <NVIC_EncodePriority+0x32>
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5a:	43da      	mvns	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	401a      	ands	r2, r3
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6e:	43d9      	mvns	r1, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	4313      	orrs	r3, r2
         );
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3724      	adds	r7, #36	; 0x24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
	...

08000f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3b01      	subs	r3, #1
 8000f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f94:	d301      	bcc.n	8000f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00f      	b.n	8000fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f9a:	4a0a      	ldr	r2, [pc, #40]	; (8000fc4 <SysTick_Config+0x40>)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fa2:	210f      	movs	r1, #15
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f7ff ff8e 	bl	8000ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fac:	4b05      	ldr	r3, [pc, #20]	; (8000fc4 <SysTick_Config+0x40>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fb2:	4b04      	ldr	r3, [pc, #16]	; (8000fc4 <SysTick_Config+0x40>)
 8000fb4:	2207      	movs	r2, #7
 8000fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb8:	2300      	movs	r3, #0
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3708      	adds	r7, #8
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	e000e010 	.word	0xe000e010

08000fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f7ff ff29 	bl	8000e28 <__NVIC_SetPriorityGrouping>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b086      	sub	sp, #24
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff0:	f7ff ff3e 	bl	8000e70 <__NVIC_GetPriorityGrouping>
 8000ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff6:	687a      	ldr	r2, [r7, #4]
 8000ff8:	68b9      	ldr	r1, [r7, #8]
 8000ffa:	6978      	ldr	r0, [r7, #20]
 8000ffc:	f7ff ff8e 	bl	8000f1c <NVIC_EncodePriority>
 8001000:	4602      	mov	r2, r0
 8001002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001006:	4611      	mov	r1, r2
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff5d 	bl	8000ec8 <__NVIC_SetPriority>
}
 800100e:	bf00      	nop
 8001010:	3718      	adds	r7, #24
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b082      	sub	sp, #8
 800101a:	af00      	add	r7, sp, #0
 800101c:	4603      	mov	r3, r0
 800101e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001024:	4618      	mov	r0, r3
 8001026:	f7ff ff31 	bl	8000e8c <__NVIC_EnableIRQ>
}
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffa2 	bl	8000f84 <SysTick_Config>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff feda 	bl	8000e10 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d101      	bne.n	8001068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e099      	b.n	800119c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2202      	movs	r2, #2
 8001074:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	681a      	ldr	r2, [r3, #0]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f022 0201 	bic.w	r2, r2, #1
 8001086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001088:	e00f      	b.n	80010aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800108a:	f7ff fec1 	bl	8000e10 <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	2b05      	cmp	r3, #5
 8001096:	d908      	bls.n	80010aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2220      	movs	r2, #32
 800109c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e078      	b.n	800119c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1e8      	bne.n	800108a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <HAL_DMA_Init+0x158>)
 80010c4:	4013      	ands	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	691b      	ldr	r3, [r3, #16]
 80010dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6a1b      	ldr	r3, [r3, #32]
 80010f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010f6:	697a      	ldr	r2, [r7, #20]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	2b04      	cmp	r3, #4
 8001102:	d107      	bne.n	8001114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110c:	4313      	orrs	r3, r2
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	4313      	orrs	r3, r2
 8001112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f023 0307 	bic.w	r3, r3, #7
 800112a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001130:	697a      	ldr	r2, [r7, #20]
 8001132:	4313      	orrs	r3, r2
 8001134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113a:	2b04      	cmp	r3, #4
 800113c:	d117      	bne.n	800116e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	697a      	ldr	r2, [r7, #20]
 8001144:	4313      	orrs	r3, r2
 8001146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00e      	beq.n	800116e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f000 fa6f 	bl	8001634 <DMA_CheckFifoParam>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d008      	beq.n	800116e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2201      	movs	r2, #1
 8001166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800116a:	2301      	movs	r3, #1
 800116c:	e016      	b.n	800119c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 fa26 	bl	80015c8 <DMA_CalcBaseAndBitshift>
 800117c:	4603      	mov	r3, r0
 800117e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001184:	223f      	movs	r2, #63	; 0x3f
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2200      	movs	r2, #0
 8001190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	f010803f 	.word	0xf010803f

080011a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
 80011b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d101      	bne.n	80011ce <HAL_DMA_Start_IT+0x26>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e040      	b.n	8001250 <HAL_DMA_Start_IT+0xa8>
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d12f      	bne.n	8001242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	2202      	movs	r2, #2
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2200      	movs	r2, #0
 80011ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	68f8      	ldr	r0, [r7, #12]
 80011f8:	f000 f9b8 	bl	800156c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001200:	223f      	movs	r2, #63	; 0x3f
 8001202:	409a      	lsls	r2, r3
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 0216 	orr.w	r2, r2, #22
 8001216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	2b00      	cmp	r3, #0
 800121e:	d007      	beq.n	8001230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f042 0208 	orr.w	r2, r2, #8
 800122e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0201 	orr.w	r2, r2, #1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	e005      	b.n	800124e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800124a:	2302      	movs	r3, #2
 800124c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800124e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001264:	4b92      	ldr	r3, [pc, #584]	; (80014b0 <HAL_DMA_IRQHandler+0x258>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a92      	ldr	r2, [pc, #584]	; (80014b4 <HAL_DMA_IRQHandler+0x25c>)
 800126a:	fba2 2303 	umull	r2, r3, r2, r3
 800126e:	0a9b      	lsrs	r3, r3, #10
 8001270:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001276:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001282:	2208      	movs	r2, #8
 8001284:	409a      	lsls	r2, r3
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d01a      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	d013      	beq.n	80012c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f022 0204 	bic.w	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b0:	2208      	movs	r2, #8
 80012b2:	409a      	lsls	r2, r3
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012bc:	f043 0201 	orr.w	r2, r3, #1
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2201      	movs	r2, #1
 80012ca:	409a      	lsls	r2, r3
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	4013      	ands	r3, r2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d012      	beq.n	80012fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	695b      	ldr	r3, [r3, #20]
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d00b      	beq.n	80012fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e6:	2201      	movs	r2, #1
 80012e8:	409a      	lsls	r2, r3
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f2:	f043 0202 	orr.w	r2, r3, #2
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	2204      	movs	r2, #4
 8001300:	409a      	lsls	r2, r3
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	4013      	ands	r3, r2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d012      	beq.n	8001330 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800131c:	2204      	movs	r2, #4
 800131e:	409a      	lsls	r2, r3
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001328:	f043 0204 	orr.w	r2, r3, #4
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2210      	movs	r2, #16
 8001336:	409a      	lsls	r2, r3
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	4013      	ands	r3, r2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d043      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d03c      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001352:	2210      	movs	r2, #16
 8001354:	409a      	lsls	r2, r3
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d018      	beq.n	800139a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d108      	bne.n	8001388 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d024      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	4798      	blx	r3
 8001386:	e01f      	b.n	80013c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138c:	2b00      	cmp	r3, #0
 800138e:	d01b      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	4798      	blx	r3
 8001398:	e016      	b.n	80013c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d107      	bne.n	80013b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0208 	bic.w	r2, r2, #8
 80013b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d003      	beq.n	80013c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	6878      	ldr	r0, [r7, #4]
 80013c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013cc:	2220      	movs	r2, #32
 80013ce:	409a      	lsls	r2, r3
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	4013      	ands	r3, r2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	f000 808e 	beq.w	80014f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0310 	and.w	r3, r3, #16
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 8086 	beq.w	80014f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013ee:	2220      	movs	r2, #32
 80013f0:	409a      	lsls	r2, r3
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b05      	cmp	r3, #5
 8001400:	d136      	bne.n	8001470 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0216 	bic.w	r2, r2, #22
 8001410:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	695a      	ldr	r2, [r3, #20]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001420:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	2b00      	cmp	r3, #0
 8001428:	d103      	bne.n	8001432 <HAL_DMA_IRQHandler+0x1da>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800142e:	2b00      	cmp	r3, #0
 8001430:	d007      	beq.n	8001442 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0208 	bic.w	r2, r2, #8
 8001440:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	223f      	movs	r2, #63	; 0x3f
 8001448:	409a      	lsls	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2201      	movs	r2, #1
 800145a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001462:	2b00      	cmp	r3, #0
 8001464:	d07d      	beq.n	8001562 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
        }
        return;
 800146e:	e078      	b.n	8001562 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d01c      	beq.n	80014b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001488:	2b00      	cmp	r3, #0
 800148a:	d108      	bne.n	800149e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001490:	2b00      	cmp	r3, #0
 8001492:	d030      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	4798      	blx	r3
 800149c:	e02b      	b.n	80014f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d027      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	4798      	blx	r3
 80014ae:	e022      	b.n	80014f6 <HAL_DMA_IRQHandler+0x29e>
 80014b0:	20000000 	.word	0x20000000
 80014b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d10f      	bne.n	80014e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0210 	bic.w	r2, r2, #16
 80014d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2200      	movs	r2, #0
 80014da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2201      	movs	r2, #1
 80014e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d032      	beq.n	8001564 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d022      	beq.n	8001550 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2205      	movs	r2, #5
 800150e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	3301      	adds	r3, #1
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	697a      	ldr	r2, [r7, #20]
 800152a:	429a      	cmp	r2, r3
 800152c:	d307      	bcc.n	800153e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1f2      	bne.n	8001522 <HAL_DMA_IRQHandler+0x2ca>
 800153c:	e000      	b.n	8001540 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800153e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2201      	movs	r2, #1
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001554:	2b00      	cmp	r3, #0
 8001556:	d005      	beq.n	8001564 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	4798      	blx	r3
 8001560:	e000      	b.n	8001564 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001562:	bf00      	nop
    }
  }
}
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop

0800156c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001588:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	689b      	ldr	r3, [r3, #8]
 8001596:	2b40      	cmp	r3, #64	; 0x40
 8001598:	d108      	bne.n	80015ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	68ba      	ldr	r2, [r7, #8]
 80015a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015aa:	e007      	b.n	80015bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
}
 80015bc:	bf00      	nop
 80015be:	3714      	adds	r7, #20
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b085      	sub	sp, #20
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	3b10      	subs	r3, #16
 80015d8:	4a14      	ldr	r2, [pc, #80]	; (800162c <DMA_CalcBaseAndBitshift+0x64>)
 80015da:	fba2 2303 	umull	r2, r3, r2, r3
 80015de:	091b      	lsrs	r3, r3, #4
 80015e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015e2:	4a13      	ldr	r2, [pc, #76]	; (8001630 <DMA_CalcBaseAndBitshift+0x68>)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b03      	cmp	r3, #3
 80015f4:	d909      	bls.n	800160a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015fe:	f023 0303 	bic.w	r3, r3, #3
 8001602:	1d1a      	adds	r2, r3, #4
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	659a      	str	r2, [r3, #88]	; 0x58
 8001608:	e007      	b.n	800161a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	687a      	ldr	r2, [r7, #4]
 8001618:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800161e:	4618      	mov	r0, r3
 8001620:	3714      	adds	r7, #20
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	aaaaaaab 	.word	0xaaaaaaab
 8001630:	08003b18 	.word	0x08003b18

08001634 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001634:	b480      	push	{r7}
 8001636:	b085      	sub	sp, #20
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800163c:	2300      	movs	r3, #0
 800163e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001644:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d11f      	bne.n	800168e <DMA_CheckFifoParam+0x5a>
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d856      	bhi.n	8001702 <DMA_CheckFifoParam+0xce>
 8001654:	a201      	add	r2, pc, #4	; (adr r2, 800165c <DMA_CheckFifoParam+0x28>)
 8001656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165a:	bf00      	nop
 800165c:	0800166d 	.word	0x0800166d
 8001660:	0800167f 	.word	0x0800167f
 8001664:	0800166d 	.word	0x0800166d
 8001668:	08001703 	.word	0x08001703
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d046      	beq.n	8001706 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800167c:	e043      	b.n	8001706 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001686:	d140      	bne.n	800170a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800168c:	e03d      	b.n	800170a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001696:	d121      	bne.n	80016dc <DMA_CheckFifoParam+0xa8>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d837      	bhi.n	800170e <DMA_CheckFifoParam+0xda>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <DMA_CheckFifoParam+0x70>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016bb 	.word	0x080016bb
 80016ac:	080016b5 	.word	0x080016b5
 80016b0:	080016cd 	.word	0x080016cd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	73fb      	strb	r3, [r7, #15]
      break;
 80016b8:	e030      	b.n	800171c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d025      	beq.n	8001712 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016ca:	e022      	b.n	8001712 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016d4:	d11f      	bne.n	8001716 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016da:	e01c      	b.n	8001716 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d903      	bls.n	80016ea <DMA_CheckFifoParam+0xb6>
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2b03      	cmp	r3, #3
 80016e6:	d003      	beq.n	80016f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016e8:	e018      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	73fb      	strb	r3, [r7, #15]
      break;
 80016ee:	e015      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00e      	beq.n	800171a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
      break;
 8001700:	e00b      	b.n	800171a <DMA_CheckFifoParam+0xe6>
      break;
 8001702:	bf00      	nop
 8001704:	e00a      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;
 8001706:	bf00      	nop
 8001708:	e008      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;
 800170a:	bf00      	nop
 800170c:	e006      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;
 800170e:	bf00      	nop
 8001710:	e004      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;
 8001712:	bf00      	nop
 8001714:	e002      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;   
 8001716:	bf00      	nop
 8001718:	e000      	b.n	800171c <DMA_CheckFifoParam+0xe8>
      break;
 800171a:	bf00      	nop
    }
  } 
  
  return status; 
 800171c:	7bfb      	ldrb	r3, [r7, #15]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3714      	adds	r7, #20
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e159      	b.n	80019fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8148 	bne.w	80019f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d00b      	beq.n	8001786 <HAL_GPIO_Init+0x5a>
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d007      	beq.n	8001786 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177a:	2b11      	cmp	r3, #17
 800177c:	d003      	beq.n	8001786 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b12      	cmp	r3, #18
 8001784:	d130      	bne.n	80017e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	2203      	movs	r2, #3
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	68da      	ldr	r2, [r3, #12]
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4313      	orrs	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017bc:	2201      	movs	r2, #1
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 0201 	and.w	r2, r3, #1
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	4313      	orrs	r3, r2
 80017e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	689a      	ldr	r2, [r3, #8]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	2b02      	cmp	r3, #2
 800181e:	d003      	beq.n	8001828 <HAL_GPIO_Init+0xfc>
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	2b12      	cmp	r3, #18
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80a2 	beq.w	80019f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a56      	ldr	r2, [pc, #344]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b54      	ldr	r3, [pc, #336]	; (8001a14 <HAL_GPIO_Init+0x2e8>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x2ec>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2f0>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d019      	beq.n	800192e <HAL_GPIO_Init+0x202>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2f4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d013      	beq.n	800192a <HAL_GPIO_Init+0x1fe>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a47      	ldr	r2, [pc, #284]	; (8001a24 <HAL_GPIO_Init+0x2f8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d00d      	beq.n	8001926 <HAL_GPIO_Init+0x1fa>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a46      	ldr	r2, [pc, #280]	; (8001a28 <HAL_GPIO_Init+0x2fc>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d007      	beq.n	8001922 <HAL_GPIO_Init+0x1f6>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a45      	ldr	r2, [pc, #276]	; (8001a2c <HAL_GPIO_Init+0x300>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d101      	bne.n	800191e <HAL_GPIO_Init+0x1f2>
 800191a:	2304      	movs	r3, #4
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800191e:	2307      	movs	r3, #7
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x204>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x204>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x204>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x2ec>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800194e:	4b38      	ldr	r3, [pc, #224]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001972:	4a2f      	ldr	r2, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x304>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001978:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_GPIO_Init+0x304>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800199c:	4a24      	ldr	r2, [pc, #144]	; (8001a30 <HAL_GPIO_Init+0x304>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019c6:	4a1a      	ldr	r2, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019cc:	4b18      	ldr	r3, [pc, #96]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f0:	4a0f      	ldr	r2, [pc, #60]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f aea2 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a66:	b480      	push	{r7}
 8001a68:	b083      	sub	sp, #12
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	695a      	ldr	r2, [r3, #20]
 8001a76:	887b      	ldrh	r3, [r7, #2]
 8001a78:	401a      	ands	r2, r3
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d104      	bne.n	8001a8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a80:	887b      	ldrh	r3, [r7, #2]
 8001a82:	041a      	lsls	r2, r3, #16
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001a88:	e002      	b.n	8001a90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr

08001a9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d101      	bne.n	8001aae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e25b      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0301 	and.w	r3, r3, #1
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d075      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001aba:	4ba3      	ldr	r3, [pc, #652]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d00c      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ac6:	4ba0      	ldr	r3, [pc, #640]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d112      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ad2:	4b9d      	ldr	r3, [pc, #628]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ade:	d10b      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ae0:	4b99      	ldr	r3, [pc, #612]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d05b      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x108>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d157      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e236      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b00:	d106      	bne.n	8001b10 <HAL_RCC_OscConfig+0x74>
 8001b02:	4b91      	ldr	r3, [pc, #580]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a90      	ldr	r2, [pc, #576]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	e01d      	b.n	8001b4c <HAL_RCC_OscConfig+0xb0>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b18:	d10c      	bne.n	8001b34 <HAL_RCC_OscConfig+0x98>
 8001b1a:	4b8b      	ldr	r3, [pc, #556]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a8a      	ldr	r2, [pc, #552]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b24:	6013      	str	r3, [r2, #0]
 8001b26:	4b88      	ldr	r3, [pc, #544]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a87      	ldr	r2, [pc, #540]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b30:	6013      	str	r3, [r2, #0]
 8001b32:	e00b      	b.n	8001b4c <HAL_RCC_OscConfig+0xb0>
 8001b34:	4b84      	ldr	r3, [pc, #528]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a83      	ldr	r2, [pc, #524]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b3e:	6013      	str	r3, [r2, #0]
 8001b40:	4b81      	ldr	r3, [pc, #516]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a80      	ldr	r2, [pc, #512]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d013      	beq.n	8001b7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7ff f95c 	bl	8000e10 <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b5c:	f7ff f958 	bl	8000e10 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	; 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1fb      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	4b76      	ldr	r3, [pc, #472]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0xc0>
 8001b7a:	e014      	b.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f948 	bl	8000e10 <HAL_GetTick>
 8001b80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b84:	f7ff f944 	bl	8000e10 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b64      	cmp	r3, #100	; 0x64
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e1e7      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	4b6c      	ldr	r3, [pc, #432]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0xe8>
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d063      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bb2:	4b65      	ldr	r3, [pc, #404]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00b      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bbe:	4b62      	ldr	r3, [pc, #392]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001bc6:	2b08      	cmp	r3, #8
 8001bc8:	d11c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bca:	4b5f      	ldr	r3, [pc, #380]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d116      	bne.n	8001c04 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bd6:	4b5c      	ldr	r3, [pc, #368]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <HAL_RCC_OscConfig+0x152>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d001      	beq.n	8001bee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e1bb      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bee:	4b56      	ldr	r3, [pc, #344]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4952      	ldr	r1, [pc, #328]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	e03a      	b.n	8001c7a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d020      	beq.n	8001c4e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0c:	4b4f      	ldr	r3, [pc, #316]	; (8001d4c <HAL_RCC_OscConfig+0x2b0>)
 8001c0e:	2201      	movs	r2, #1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff f8fd 	bl	8000e10 <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff f8f9 	bl	8000e10 <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e19c      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2c:	4b46      	ldr	r3, [pc, #280]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0f0      	beq.n	8001c1a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c38:	4b43      	ldr	r3, [pc, #268]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	00db      	lsls	r3, r3, #3
 8001c46:	4940      	ldr	r1, [pc, #256]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	600b      	str	r3, [r1, #0]
 8001c4c:	e015      	b.n	8001c7a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c4e:	4b3f      	ldr	r3, [pc, #252]	; (8001d4c <HAL_RCC_OscConfig+0x2b0>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f8dc 	bl	8000e10 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c5c:	f7ff f8d8 	bl	8000e10 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e17b      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c6e:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0308 	and.w	r3, r3, #8
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d030      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d016      	beq.n	8001cbc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8e:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCC_OscConfig+0x2b4>)
 8001c90:	2201      	movs	r2, #1
 8001c92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f8bc 	bl	8000e10 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f8b8 	bl	8000e10 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e15b      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x200>
 8001cba:	e015      	b.n	8001ce8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cbc:	4b24      	ldr	r3, [pc, #144]	; (8001d50 <HAL_RCC_OscConfig+0x2b4>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f8a5 	bl	8000e10 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e008      	b.n	8001cdc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f8a1 	bl	8000e10 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e144      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cdc:	4b1a      	ldr	r3, [pc, #104]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d1f0      	bne.n	8001cca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 0304 	and.w	r3, r3, #4
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80a0 	beq.w	8001e36 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b13      	ldr	r3, [pc, #76]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10f      	bne.n	8001d26 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a0e      	ldr	r2, [pc, #56]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d22:	2301      	movs	r3, #1
 8001d24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d26:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <HAL_RCC_OscConfig+0x2b8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d121      	bne.n	8001d76 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_RCC_OscConfig+0x2b8>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a07      	ldr	r2, [pc, #28]	; (8001d54 <HAL_RCC_OscConfig+0x2b8>)
 8001d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3e:	f7ff f867 	bl	8000e10 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d44:	e011      	b.n	8001d6a <HAL_RCC_OscConfig+0x2ce>
 8001d46:	bf00      	nop
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	42470000 	.word	0x42470000
 8001d50:	42470e80 	.word	0x42470e80
 8001d54:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7ff f85a 	bl	8000e10 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0fd      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6a:	4b81      	ldr	r3, [pc, #516]	; (8001f70 <HAL_RCC_OscConfig+0x4d4>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d106      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2f0>
 8001d7e:	4b7d      	ldr	r3, [pc, #500]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a7c      	ldr	r2, [pc, #496]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001d84:	f043 0301 	orr.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	e01c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x32a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	2b05      	cmp	r3, #5
 8001d92:	d10c      	bne.n	8001dae <HAL_RCC_OscConfig+0x312>
 8001d94:	4b77      	ldr	r3, [pc, #476]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d98:	4a76      	ldr	r2, [pc, #472]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	6713      	str	r3, [r2, #112]	; 0x70
 8001da0:	4b74      	ldr	r3, [pc, #464]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a73      	ldr	r2, [pc, #460]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001da6:	f043 0301 	orr.w	r3, r3, #1
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	e00b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x32a>
 8001dae:	4b71      	ldr	r3, [pc, #452]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db2:	4a70      	ldr	r2, [pc, #448]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001db4:	f023 0301 	bic.w	r3, r3, #1
 8001db8:	6713      	str	r3, [r2, #112]	; 0x70
 8001dba:	4b6e      	ldr	r3, [pc, #440]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a6d      	ldr	r2, [pc, #436]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001dc0:	f023 0304 	bic.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d015      	beq.n	8001dfa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dce:	f7ff f81f 	bl	8000e10 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd4:	e00a      	b.n	8001dec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dd6:	f7ff f81b 	bl	8000e10 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e0bc      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0ee      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x33a>
 8001df8:	e014      	b.n	8001e24 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dfa:	f7ff f809 	bl	8000e10 <HAL_GetTick>
 8001dfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e00:	e00a      	b.n	8001e18 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e02:	f7ff f805 	bl	8000e10 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e0a6      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e18:	4b56      	ldr	r3, [pc, #344]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ee      	bne.n	8001e02 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d105      	bne.n	8001e36 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e2a:	4b52      	ldr	r3, [pc, #328]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2e:	4a51      	ldr	r2, [pc, #324]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e34:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 8092 	beq.w	8001f64 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e40:	4b4c      	ldr	r3, [pc, #304]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f003 030c 	and.w	r3, r3, #12
 8001e48:	2b08      	cmp	r3, #8
 8001e4a:	d05c      	beq.n	8001f06 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	699b      	ldr	r3, [r3, #24]
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d141      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <HAL_RCC_OscConfig+0x4dc>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e5a:	f7fe ffd9 	bl	8000e10 <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e62:	f7fe ffd5 	bl	8000e10 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e078      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e74:	4b3f      	ldr	r3, [pc, #252]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69da      	ldr	r2, [r3, #28]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	019b      	lsls	r3, r3, #6
 8001e90:	431a      	orrs	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	061b      	lsls	r3, r3, #24
 8001ea4:	4933      	ldr	r1, [pc, #204]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eaa:	4b33      	ldr	r3, [pc, #204]	; (8001f78 <HAL_RCC_OscConfig+0x4dc>)
 8001eac:	2201      	movs	r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb0:	f7fe ffae 	bl	8000e10 <HAL_GetTick>
 8001eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ffaa 	bl	8000e10 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e04d      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d0f0      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x41c>
 8001ed6:	e045      	b.n	8001f64 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <HAL_RCC_OscConfig+0x4dc>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ede:	f7fe ff97 	bl	8000e10 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7fe ff93 	bl	8000e10 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e036      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d1f0      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x44a>
 8001f04:	e02e      	b.n	8001f64 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e029      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f12:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <HAL_RCC_OscConfig+0x4d8>)
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d11c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d115      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f34:	68fa      	ldr	r2, [r7, #12]
 8001f36:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d10d      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d106      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f5c:	429a      	cmp	r2, r3
 8001f5e:	d001      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001f64:	2300      	movs	r3, #0
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	40007000 	.word	0x40007000
 8001f74:	40023800 	.word	0x40023800
 8001f78:	42470060 	.word	0x42470060

08001f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e0cc      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f90:	4b68      	ldr	r3, [pc, #416]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	683a      	ldr	r2, [r7, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d90c      	bls.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9e:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa6:	4b63      	ldr	r3, [pc, #396]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e0b8      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0302 	and.w	r3, r3, #2
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d020      	beq.n	8002006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fd0:	4b59      	ldr	r3, [pc, #356]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe8:	4b53      	ldr	r3, [pc, #332]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a52      	ldr	r2, [pc, #328]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	494d      	ldr	r1, [pc, #308]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	4313      	orrs	r3, r2
 8002004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0301 	and.w	r3, r3, #1
 800200e:	2b00      	cmp	r3, #0
 8002010:	d044      	beq.n	800209c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d107      	bne.n	800202a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800201a:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d119      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e07f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b02      	cmp	r3, #2
 8002030:	d003      	beq.n	800203a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	2b03      	cmp	r3, #3
 8002038:	d107      	bne.n	800204a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203a:	4b3f      	ldr	r3, [pc, #252]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d109      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e06f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e067      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800205a:	4b37      	ldr	r3, [pc, #220]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f023 0203 	bic.w	r2, r3, #3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4934      	ldr	r1, [pc, #208]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800206c:	f7fe fed0 	bl	8000e10 <HAL_GetTick>
 8002070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002072:	e00a      	b.n	800208a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002074:	f7fe fecc 	bl	8000e10 <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002082:	4293      	cmp	r3, r2
 8002084:	d901      	bls.n	800208a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04f      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800208a:	4b2b      	ldr	r3, [pc, #172]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	f003 020c 	and.w	r2, r3, #12
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	429a      	cmp	r2, r3
 800209a:	d1eb      	bne.n	8002074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 030f 	and.w	r3, r3, #15
 80020a4:	683a      	ldr	r2, [r7, #0]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d20c      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020aa:	4b22      	ldr	r3, [pc, #136]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b20      	ldr	r3, [pc, #128]	; (8002134 <HAL_RCC_ClockConfig+0x1b8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d001      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e032      	b.n	800212a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4916      	ldr	r1, [pc, #88]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d009      	beq.n	8002102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ee:	4b12      	ldr	r3, [pc, #72]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	691b      	ldr	r3, [r3, #16]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	490e      	ldr	r1, [pc, #56]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002102:	f000 f821 	bl	8002148 <HAL_RCC_GetSysClockFreq>
 8002106:	4602      	mov	r2, r0
 8002108:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	091b      	lsrs	r3, r3, #4
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	490a      	ldr	r1, [pc, #40]	; (800213c <HAL_RCC_ClockConfig+0x1c0>)
 8002114:	5ccb      	ldrb	r3, [r1, r3]
 8002116:	fa22 f303 	lsr.w	r3, r2, r3
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1c4>)
 800211c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_RCC_ClockConfig+0x1c8>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f7fe fe30 	bl	8000d88 <HAL_InitTick>

  return HAL_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40023c00 	.word	0x40023c00
 8002138:	40023800 	.word	0x40023800
 800213c:	08003b00 	.word	0x08003b00
 8002140:	20000000 	.word	0x20000000
 8002144:	20000004 	.word	0x20000004

08002148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002148:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
 8002154:	2300      	movs	r3, #0
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	2300      	movs	r3, #0
 800215a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800215c:	2300      	movs	r3, #0
 800215e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002160:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	f003 030c 	and.w	r3, r3, #12
 8002168:	2b08      	cmp	r3, #8
 800216a:	d00d      	beq.n	8002188 <HAL_RCC_GetSysClockFreq+0x40>
 800216c:	2b08      	cmp	r3, #8
 800216e:	f200 80bd 	bhi.w	80022ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8002172:	2b00      	cmp	r3, #0
 8002174:	d002      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x34>
 8002176:	2b04      	cmp	r3, #4
 8002178:	d003      	beq.n	8002182 <HAL_RCC_GetSysClockFreq+0x3a>
 800217a:	e0b7      	b.n	80022ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800217c:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800217e:	60bb      	str	r3, [r7, #8]
       break;
 8002180:	e0b7      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002182:	4b61      	ldr	r3, [pc, #388]	; (8002308 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002184:	60bb      	str	r3, [r7, #8]
      break;
 8002186:	e0b4      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002188:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002190:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002192:	4b5b      	ldr	r3, [pc, #364]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d04d      	beq.n	800223a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800219e:	4b58      	ldr	r3, [pc, #352]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	099b      	lsrs	r3, r3, #6
 80021a4:	461a      	mov	r2, r3
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021ae:	f04f 0100 	mov.w	r1, #0
 80021b2:	ea02 0800 	and.w	r8, r2, r0
 80021b6:	ea03 0901 	and.w	r9, r3, r1
 80021ba:	4640      	mov	r0, r8
 80021bc:	4649      	mov	r1, r9
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	014b      	lsls	r3, r1, #5
 80021c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021cc:	0142      	lsls	r2, r0, #5
 80021ce:	4610      	mov	r0, r2
 80021d0:	4619      	mov	r1, r3
 80021d2:	ebb0 0008 	subs.w	r0, r0, r8
 80021d6:	eb61 0109 	sbc.w	r1, r1, r9
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	018b      	lsls	r3, r1, #6
 80021e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021e8:	0182      	lsls	r2, r0, #6
 80021ea:	1a12      	subs	r2, r2, r0
 80021ec:	eb63 0301 	sbc.w	r3, r3, r1
 80021f0:	f04f 0000 	mov.w	r0, #0
 80021f4:	f04f 0100 	mov.w	r1, #0
 80021f8:	00d9      	lsls	r1, r3, #3
 80021fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021fe:	00d0      	lsls	r0, r2, #3
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	eb12 0208 	adds.w	r2, r2, r8
 8002208:	eb43 0309 	adc.w	r3, r3, r9
 800220c:	f04f 0000 	mov.w	r0, #0
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	0259      	lsls	r1, r3, #9
 8002216:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800221a:	0250      	lsls	r0, r2, #9
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	461a      	mov	r2, r3
 8002228:	f04f 0300 	mov.w	r3, #0
 800222c:	f7fd ffd4 	bl	80001d8 <__aeabi_uldivmod>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4613      	mov	r3, r2
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	e04a      	b.n	80022d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800223a:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	461a      	mov	r2, r3
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	f240 10ff 	movw	r0, #511	; 0x1ff
 800224a:	f04f 0100 	mov.w	r1, #0
 800224e:	ea02 0400 	and.w	r4, r2, r0
 8002252:	ea03 0501 	and.w	r5, r3, r1
 8002256:	4620      	mov	r0, r4
 8002258:	4629      	mov	r1, r5
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	014b      	lsls	r3, r1, #5
 8002264:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002268:	0142      	lsls	r2, r0, #5
 800226a:	4610      	mov	r0, r2
 800226c:	4619      	mov	r1, r3
 800226e:	1b00      	subs	r0, r0, r4
 8002270:	eb61 0105 	sbc.w	r1, r1, r5
 8002274:	f04f 0200 	mov.w	r2, #0
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	018b      	lsls	r3, r1, #6
 800227e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002282:	0182      	lsls	r2, r0, #6
 8002284:	1a12      	subs	r2, r2, r0
 8002286:	eb63 0301 	sbc.w	r3, r3, r1
 800228a:	f04f 0000 	mov.w	r0, #0
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	00d9      	lsls	r1, r3, #3
 8002294:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002298:	00d0      	lsls	r0, r2, #3
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	1912      	adds	r2, r2, r4
 80022a0:	eb45 0303 	adc.w	r3, r5, r3
 80022a4:	f04f 0000 	mov.w	r0, #0
 80022a8:	f04f 0100 	mov.w	r1, #0
 80022ac:	0299      	lsls	r1, r3, #10
 80022ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022b2:	0290      	lsls	r0, r2, #10
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	461a      	mov	r2, r3
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	f7fd ff88 	bl	80001d8 <__aeabi_uldivmod>
 80022c8:	4602      	mov	r2, r0
 80022ca:	460b      	mov	r3, r1
 80022cc:	4613      	mov	r3, r2
 80022ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022d0:	4b0b      	ldr	r3, [pc, #44]	; (8002300 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	0c1b      	lsrs	r3, r3, #16
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	3301      	adds	r3, #1
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80022e8:	60bb      	str	r3, [r7, #8]
      break;
 80022ea:	e002      	b.n	80022f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022ee:	60bb      	str	r3, [r7, #8]
      break;
 80022f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022f2:	68bb      	ldr	r3, [r7, #8]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	00f42400 	.word	0x00f42400
 8002308:	007a1200 	.word	0x007a1200

0800230c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002310:	4b03      	ldr	r3, [pc, #12]	; (8002320 <HAL_RCC_GetHCLKFreq+0x14>)
 8002312:	681b      	ldr	r3, [r3, #0]
}
 8002314:	4618      	mov	r0, r3
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
 800231e:	bf00      	nop
 8002320:	20000000 	.word	0x20000000

08002324 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002328:	f7ff fff0 	bl	800230c <HAL_RCC_GetHCLKFreq>
 800232c:	4602      	mov	r2, r0
 800232e:	4b05      	ldr	r3, [pc, #20]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	0a9b      	lsrs	r3, r3, #10
 8002334:	f003 0307 	and.w	r3, r3, #7
 8002338:	4903      	ldr	r1, [pc, #12]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233a:	5ccb      	ldrb	r3, [r1, r3]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002340:	4618      	mov	r0, r3
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	08003b10 	.word	0x08003b10

0800234c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002350:	f7ff ffdc 	bl	800230c <HAL_RCC_GetHCLKFreq>
 8002354:	4602      	mov	r2, r0
 8002356:	4b05      	ldr	r3, [pc, #20]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	0b5b      	lsrs	r3, r3, #13
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	4903      	ldr	r1, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002362:	5ccb      	ldrb	r3, [r1, r3]
 8002364:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002368:	4618      	mov	r0, r3
 800236a:	bd80      	pop	{r7, pc}
 800236c:	40023800 	.word	0x40023800
 8002370:	08003b10 	.word	0x08003b10

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e01d      	b.n	80023c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fb64 	bl	8000a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 fca2 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80023ca:	b480      	push	{r7}
 80023cc:	b085      	sub	sp, #20
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2202      	movs	r2, #2
 80023d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d007      	beq.n	80023fc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0201 	orr.w	r2, r2, #1
 80023fa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2201      	movs	r2, #1
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3714      	adds	r7, #20
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68da      	ldr	r2, [r3, #12]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f042 0201 	orr.w	r2, r2, #1
 8002428:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2b06      	cmp	r3, #6
 800243a:	d007      	beq.n	800244c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3714      	adds	r7, #20
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800245a:	b580      	push	{r7, lr}
 800245c:	b082      	sub	sp, #8
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e01d      	b.n	80024a8 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b00      	cmp	r3, #0
 8002476:	d106      	bne.n	8002486 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f000 f815 	bl	80024b0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3304      	adds	r3, #4
 8002496:	4619      	mov	r1, r3
 8002498:	4610      	mov	r0, r2
 800249a:	f000 fc2f 	bl	8002cfc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2201      	movs	r2, #1
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80024b8:	bf00      	nop
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	60b9      	str	r1, [r7, #8]
 80024ce:	607a      	str	r2, [r7, #4]
 80024d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d101      	bne.n	80024e2 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
 80024e0:	e0dc      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d10b      	bne.n	8002506 <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_TIM_IC_Start_DMA+0x3a>
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e0ce      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2202      	movs	r2, #2
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	f200 80ad 	bhi.w	8002668 <HAL_TIM_IC_Start_DMA+0x1a4>
 800250e:	a201      	add	r2, pc, #4	; (adr r2, 8002514 <HAL_TIM_IC_Start_DMA+0x50>)
 8002510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002514:	08002549 	.word	0x08002549
 8002518:	08002669 	.word	0x08002669
 800251c:	08002669 	.word	0x08002669
 8002520:	08002669 	.word	0x08002669
 8002524:	08002591 	.word	0x08002591
 8002528:	08002669 	.word	0x08002669
 800252c:	08002669 	.word	0x08002669
 8002530:	08002669 	.word	0x08002669
 8002534:	080025d9 	.word	0x080025d9
 8002538:	08002669 	.word	0x08002669
 800253c:	08002669 	.word	0x08002669
 8002540:	08002669 	.word	0x08002669
 8002544:	08002621 	.word	0x08002621
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254c:	4a55      	ldr	r2, [pc, #340]	; (80026a4 <HAL_TIM_IC_Start_DMA+0x1e0>)
 800254e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002554:	4a54      	ldr	r2, [pc, #336]	; (80026a8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002556:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255c:	4a53      	ldr	r2, [pc, #332]	; (80026ac <HAL_TIM_IC_Start_DMA+0x1e8>)
 800255e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	3334      	adds	r3, #52	; 0x34
 800256a:	4619      	mov	r1, r3
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	f7fe fe1a 	bl	80011a8 <HAL_DMA_Start_IT>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e08e      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	68da      	ldr	r2, [r3, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800258c:	60da      	str	r2, [r3, #12]
      break;
 800258e:	e06c      	b.n	800266a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002594:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002596:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259c:	4a42      	ldr	r2, [pc, #264]	; (80026a8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800259e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	4a41      	ldr	r2, [pc, #260]	; (80026ac <HAL_TIM_IC_Start_DMA+0x1e8>)
 80025a6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	3338      	adds	r3, #56	; 0x38
 80025b2:	4619      	mov	r1, r3
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	887b      	ldrh	r3, [r7, #2]
 80025b8:	f7fe fdf6 	bl	80011a8 <HAL_DMA_Start_IT>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e06a      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80025d4:	60da      	str	r2, [r3, #12]
      break;
 80025d6:	e048      	b.n	800266a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025dc:	4a31      	ldr	r2, [pc, #196]	; (80026a4 <HAL_TIM_IC_Start_DMA+0x1e0>)
 80025de:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	4a30      	ldr	r2, [pc, #192]	; (80026a8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 80025e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ec:	4a2f      	ldr	r2, [pc, #188]	; (80026ac <HAL_TIM_IC_Start_DMA+0x1e8>)
 80025ee:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	333c      	adds	r3, #60	; 0x3c
 80025fa:	4619      	mov	r1, r3
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	f7fe fdd2 	bl	80011a8 <HAL_DMA_Start_IT>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e046      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68da      	ldr	r2, [r3, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261c:	60da      	str	r2, [r3, #12]
      break;
 800261e:	e024      	b.n	800266a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002626:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262c:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_TIM_IC_Start_DMA+0x1e4>)
 800262e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002634:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002636:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3340      	adds	r3, #64	; 0x40
 8002642:	4619      	mov	r1, r3
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	887b      	ldrh	r3, [r7, #2]
 8002648:	f7fe fdae 	bl	80011a8 <HAL_DMA_Start_IT>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e022      	b.n	800269c <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002664:	60da      	str	r2, [r3, #12]
      break;
 8002666:	e000      	b.n	800266a <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8002668:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2201      	movs	r2, #1
 8002670:	68b9      	ldr	r1, [r7, #8]
 8002672:	4618      	mov	r0, r3
 8002674:	f000 fd7a 	bl	800316c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d007      	beq.n	800269a <HAL_TIM_IC_Start_DMA+0x1d6>
  {
    __HAL_TIM_ENABLE(htim);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f042 0201 	orr.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800269a:	2300      	movs	r3, #0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	08002c1d 	.word	0x08002c1d
 80026a8:	08002c8d 	.word	0x08002c8d
 80026ac:	08002bf9 	.word	0x08002bf9

080026b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0302 	and.w	r3, r3, #2
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d122      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d11b      	bne.n	800270c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0202 	mvn.w	r2, #2
 80026dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2201      	movs	r2, #1
 80026e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 fa4e 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 80026f8:	e005      	b.n	8002706 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fa40 	bl	8002b80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 fa5b 	bl	8002bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b04      	cmp	r3, #4
 8002718:	d122      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	2b04      	cmp	r3, #4
 8002726:	d11b      	bne.n	8002760 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f06f 0204 	mvn.w	r2, #4
 8002730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2202      	movs	r2, #2
 8002736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 fa24 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 800274c:	e005      	b.n	800275a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f000 fa16 	bl	8002b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fa31 	bl	8002bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b08      	cmp	r3, #8
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b08      	cmp	r3, #8
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0208 	mvn.w	r2, #8
 8002784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2204      	movs	r2, #4
 800278a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f9fa 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f9ec 	bl	8002b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 fa07 	bl	8002bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0310 	and.w	r3, r3, #16
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0310 	and.w	r3, r3, #16
 80027cc:	2b10      	cmp	r3, #16
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0210 	mvn.w	r2, #16
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2208      	movs	r2, #8
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	69db      	ldr	r3, [r3, #28]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f9d0 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f9c2 	bl	8002b80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f9dd 	bl	8002bbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b01      	cmp	r3, #1
 8002814:	d10e      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d107      	bne.n	8002834 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0201 	mvn.w	r2, #1
 800282c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7fe f8ce 	bl	80009d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800283e:	2b80      	cmp	r3, #128	; 0x80
 8002840:	d10e      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d107      	bne.n	8002860 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002858:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 fd24 	bl	80032a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800286a:	2b40      	cmp	r3, #64	; 0x40
 800286c:	d10e      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002878:	2b40      	cmp	r3, #64	; 0x40
 800287a:	d107      	bne.n	800288c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f9a2 	bl	8002bd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0320 	and.w	r3, r3, #32
 8002896:	2b20      	cmp	r3, #32
 8002898:	d10e      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0320 	and.w	r3, r3, #32
 80028a4:	2b20      	cmp	r3, #32
 80028a6:	d107      	bne.n	80028b8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0220 	mvn.w	r2, #32
 80028b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f000 fcee 	bl	8003294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_TIM_IC_ConfigChannel+0x1a>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e08a      	b.n	80029f0 <HAL_TIM_IC_ConfigChannel+0x130>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2202      	movs	r2, #2
 80028e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d11b      	bne.n	8002928 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6818      	ldr	r0, [r3, #0]
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	6819      	ldr	r1, [r3, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	f000 fa7c 	bl	8002dfc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	699a      	ldr	r2, [r3, #24]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020c 	bic.w	r2, r2, #12
 8002912:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	6999      	ldr	r1, [r3, #24]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	689a      	ldr	r2, [r3, #8]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	430a      	orrs	r2, r1
 8002924:	619a      	str	r2, [r3, #24]
 8002926:	e05a      	b.n	80029de <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b04      	cmp	r3, #4
 800292c:	d11c      	bne.n	8002968 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6818      	ldr	r0, [r3, #0]
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f000 faf4 	bl	8002f2a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	699a      	ldr	r2, [r3, #24]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002950:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6999      	ldr	r1, [r3, #24]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	021a      	lsls	r2, r3, #8
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	619a      	str	r2, [r3, #24]
 8002966:	e03a      	b.n	80029de <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2b08      	cmp	r3, #8
 800296c:	d11b      	bne.n	80029a6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6818      	ldr	r0, [r3, #0]
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6819      	ldr	r1, [r3, #0]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	685a      	ldr	r2, [r3, #4]
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	f000 fb41 	bl	8003004 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	69da      	ldr	r2, [r3, #28]
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 020c 	bic.w	r2, r2, #12
 8002990:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	69d9      	ldr	r1, [r3, #28]
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	430a      	orrs	r2, r1
 80029a2:	61da      	str	r2, [r3, #28]
 80029a4:	e01b      	b.n	80029de <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	6819      	ldr	r1, [r3, #0]
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f000 fb61 	bl	800307c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80029c8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	69d9      	ldr	r1, [r3, #28]
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	021a      	lsls	r2, r3, #8
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d101      	bne.n	8002a10 <HAL_TIM_ConfigClockSource+0x18>
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	e0b3      	b.n	8002b78 <HAL_TIM_ConfigClockSource+0x180>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a36:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a48:	d03e      	beq.n	8002ac8 <HAL_TIM_ConfigClockSource+0xd0>
 8002a4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a4e:	f200 8087 	bhi.w	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a56:	f000 8085 	beq.w	8002b64 <HAL_TIM_ConfigClockSource+0x16c>
 8002a5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a5e:	d87f      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a60:	2b70      	cmp	r3, #112	; 0x70
 8002a62:	d01a      	beq.n	8002a9a <HAL_TIM_ConfigClockSource+0xa2>
 8002a64:	2b70      	cmp	r3, #112	; 0x70
 8002a66:	d87b      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a68:	2b60      	cmp	r3, #96	; 0x60
 8002a6a:	d050      	beq.n	8002b0e <HAL_TIM_ConfigClockSource+0x116>
 8002a6c:	2b60      	cmp	r3, #96	; 0x60
 8002a6e:	d877      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a70:	2b50      	cmp	r3, #80	; 0x50
 8002a72:	d03c      	beq.n	8002aee <HAL_TIM_ConfigClockSource+0xf6>
 8002a74:	2b50      	cmp	r3, #80	; 0x50
 8002a76:	d873      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d058      	beq.n	8002b2e <HAL_TIM_ConfigClockSource+0x136>
 8002a7c:	2b40      	cmp	r3, #64	; 0x40
 8002a7e:	d86f      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a80:	2b30      	cmp	r3, #48	; 0x30
 8002a82:	d064      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x156>
 8002a84:	2b30      	cmp	r3, #48	; 0x30
 8002a86:	d86b      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d060      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x156>
 8002a8c:	2b20      	cmp	r3, #32
 8002a8e:	d867      	bhi.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d05c      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x156>
 8002a94:	2b10      	cmp	r3, #16
 8002a96:	d05a      	beq.n	8002b4e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002a98:	e062      	b.n	8002b60 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6818      	ldr	r0, [r3, #0]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	6899      	ldr	r1, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	685a      	ldr	r2, [r3, #4]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f000 fb3f 	bl	800312c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002abc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	609a      	str	r2, [r3, #8]
      break;
 8002ac6:	e04e      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6818      	ldr	r0, [r3, #0]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6899      	ldr	r1, [r3, #8]
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f000 fb28 	bl	800312c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689a      	ldr	r2, [r3, #8]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002aea:	609a      	str	r2, [r3, #8]
      break;
 8002aec:	e03b      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6818      	ldr	r0, [r3, #0]
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	6859      	ldr	r1, [r3, #4]
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	461a      	mov	r2, r3
 8002afc:	f000 f9e6 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2150      	movs	r1, #80	; 0x50
 8002b06:	4618      	mov	r0, r3
 8002b08:	f000 faf5 	bl	80030f6 <TIM_ITRx_SetConfig>
      break;
 8002b0c:	e02b      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6818      	ldr	r0, [r3, #0]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f000 fa42 	bl	8002fa4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	2160      	movs	r1, #96	; 0x60
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 fae5 	bl	80030f6 <TIM_ITRx_SetConfig>
      break;
 8002b2c:	e01b      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6818      	ldr	r0, [r3, #0]
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	6859      	ldr	r1, [r3, #4]
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f000 f9c6 	bl	8002ecc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2140      	movs	r1, #64	; 0x40
 8002b46:	4618      	mov	r0, r3
 8002b48:	f000 fad5 	bl	80030f6 <TIM_ITRx_SetConfig>
      break;
 8002b4c:	e00b      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4619      	mov	r1, r3
 8002b58:	4610      	mov	r0, r2
 8002b5a:	f000 facc 	bl	80030f6 <TIM_ITRx_SetConfig>
      break;
 8002b5e:	e002      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b60:	bf00      	nop
 8002b62:	e000      	b.n	8002b66 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002b64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8002bb0:	bf00      	nop
 8002bb2:	370c      	adds	r7, #12
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr

08002bbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	f7ff ffe8 	bl	8002be4 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8002c14:	bf00      	nop
 8002c16:	3710      	adds	r7, #16
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c28:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d103      	bne.n	8002c44 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	771a      	strb	r2, [r3, #28]
 8002c42:	e019      	b.n	8002c78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d103      	bne.n	8002c56 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2202      	movs	r2, #2
 8002c52:	771a      	strb	r2, [r3, #28]
 8002c54:	e010      	b.n	8002c78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d103      	bne.n	8002c68 <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2204      	movs	r2, #4
 8002c64:	771a      	strb	r2, [r3, #28]
 8002c66:	e007      	b.n	8002c78 <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d102      	bne.n	8002c78 <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2208      	movs	r2, #8
 8002c76:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8002c78:	68f8      	ldr	r0, [r7, #12]
 8002c7a:	f7ff ff8b 	bl	8002b94 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2200      	movs	r2, #0
 8002c82:	771a      	strb	r2, [r3, #28]
}
 8002c84:	bf00      	nop
 8002c86:	3710      	adds	r7, #16
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}

08002c8c <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c98:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d103      	bne.n	8002cb4 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	771a      	strb	r2, [r3, #28]
 8002cb2:	e019      	b.n	8002ce8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d103      	bne.n	8002cc6 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2202      	movs	r2, #2
 8002cc2:	771a      	strb	r2, [r3, #28]
 8002cc4:	e010      	b.n	8002ce8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d103      	bne.n	8002cd8 <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2204      	movs	r2, #4
 8002cd4:	771a      	strb	r2, [r3, #28]
 8002cd6:	e007      	b.n	8002ce8 <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	687a      	ldr	r2, [r7, #4]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d102      	bne.n	8002ce8 <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2208      	movs	r2, #8
 8002ce6:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8002ce8:	68f8      	ldr	r0, [r7, #12]
 8002cea:	f7ff ff5d 	bl	8002ba8 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	771a      	strb	r2, [r3, #28]
}
 8002cf4:	bf00      	nop
 8002cf6:	3710      	adds	r7, #16
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a34      	ldr	r2, [pc, #208]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d00f      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1a:	d00b      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a31      	ldr	r2, [pc, #196]	; (8002de4 <TIM_Base_SetConfig+0xe8>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d007      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	4a30      	ldr	r2, [pc, #192]	; (8002de8 <TIM_Base_SetConfig+0xec>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d003      	beq.n	8002d34 <TIM_Base_SetConfig+0x38>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a2f      	ldr	r2, [pc, #188]	; (8002dec <TIM_Base_SetConfig+0xf0>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d108      	bne.n	8002d46 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	68fa      	ldr	r2, [r7, #12]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a25      	ldr	r2, [pc, #148]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01b      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d54:	d017      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a22      	ldr	r2, [pc, #136]	; (8002de4 <TIM_Base_SetConfig+0xe8>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d013      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <TIM_Base_SetConfig+0xec>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a20      	ldr	r2, [pc, #128]	; (8002dec <TIM_Base_SetConfig+0xf0>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1f      	ldr	r2, [pc, #124]	; (8002df0 <TIM_Base_SetConfig+0xf4>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <TIM_Base_SetConfig+0xf8>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <TIM_Base_SetConfig+0x8a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <TIM_Base_SetConfig+0xfc>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d108      	bne.n	8002d98 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	695b      	ldr	r3, [r3, #20]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	68fa      	ldr	r2, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4a08      	ldr	r2, [pc, #32]	; (8002de0 <TIM_Base_SetConfig+0xe4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d103      	bne.n	8002dcc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	691a      	ldr	r2, [r3, #16]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	615a      	str	r2, [r3, #20]
}
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	40010000 	.word	0x40010000
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40000800 	.word	0x40000800
 8002dec:	40000c00 	.word	0x40000c00
 8002df0:	40014000 	.word	0x40014000
 8002df4:	40014400 	.word	0x40014400
 8002df8:	40014800 	.word	0x40014800

08002dfc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b087      	sub	sp, #28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
 8002e08:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f023 0201 	bic.w	r2, r3, #1
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <TIM_TI1_SetConfig+0xbc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <TIM_TI1_SetConfig+0x56>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d00f      	beq.n	8002e52 <TIM_TI1_SetConfig+0x56>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	4a21      	ldr	r2, [pc, #132]	; (8002ebc <TIM_TI1_SetConfig+0xc0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d00b      	beq.n	8002e52 <TIM_TI1_SetConfig+0x56>
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	4a20      	ldr	r2, [pc, #128]	; (8002ec0 <TIM_TI1_SetConfig+0xc4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d007      	beq.n	8002e52 <TIM_TI1_SetConfig+0x56>
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a1f      	ldr	r2, [pc, #124]	; (8002ec4 <TIM_TI1_SetConfig+0xc8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d003      	beq.n	8002e52 <TIM_TI1_SetConfig+0x56>
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ec8 <TIM_TI1_SetConfig+0xcc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d101      	bne.n	8002e56 <TIM_TI1_SetConfig+0x5a>
 8002e52:	2301      	movs	r3, #1
 8002e54:	e000      	b.n	8002e58 <TIM_TI1_SetConfig+0x5c>
 8002e56:	2300      	movs	r3, #0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d008      	beq.n	8002e6e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f023 0303 	bic.w	r3, r3, #3
 8002e62:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	e003      	b.n	8002e76 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f043 0301 	orr.w	r3, r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 030a 	bic.w	r3, r3, #10
 8002e90:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 030a 	and.w	r3, r3, #10
 8002e98:	693a      	ldr	r2, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	697a      	ldr	r2, [r7, #20]
 8002ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	693a      	ldr	r2, [r7, #16]
 8002ea8:	621a      	str	r2, [r3, #32]
}
 8002eaa:	bf00      	nop
 8002eac:	371c      	adds	r7, #28
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40010000 	.word	0x40010000
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800
 8002ec4:	40000c00 	.word	0x40000c00
 8002ec8:	40014000 	.word	0x40014000

08002ecc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	f023 0201 	bic.w	r2, r3, #1
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	011b      	lsls	r3, r3, #4
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	f023 030a 	bic.w	r3, r3, #10
 8002f08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	621a      	str	r2, [r3, #32]
}
 8002f1e:	bf00      	nop
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	f023 0210 	bic.w	r2, r3, #16
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f56:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	021b      	lsls	r3, r3, #8
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	031b      	lsls	r3, r3, #12
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	f023 0210 	bic.w	r2, r3, #16
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6a1b      	ldr	r3, [r3, #32]
 8002fc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	031b      	lsls	r3, r3, #12
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fe0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	693a      	ldr	r2, [r7, #16]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	621a      	str	r2, [r3, #32]
}
 8002ff8:	bf00      	nop
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
 8003010:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a1b      	ldr	r3, [r3, #32]
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 0303 	bic.w	r3, r3, #3
 8003030:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4313      	orrs	r3, r2
 8003038:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003040:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	011b      	lsls	r3, r3, #4
 8003046:	b2db      	uxtb	r3, r3
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	4313      	orrs	r3, r2
 800304c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003054:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	021b      	lsls	r3, r3, #8
 800305a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800305e:	693a      	ldr	r2, [r7, #16]
 8003060:	4313      	orrs	r3, r2
 8003062:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	621a      	str	r2, [r3, #32]
}
 8003070:	bf00      	nop
 8003072:	371c      	adds	r7, #28
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80030ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	031b      	lsls	r3, r3, #12
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	697a      	ldr	r2, [r7, #20]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80030ce:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	031b      	lsls	r3, r3, #12
 80030d4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	621a      	str	r2, [r3, #32]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr

080030f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030f6:	b480      	push	{r7}
 80030f8:	b085      	sub	sp, #20
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
 80030fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800310c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800310e:	683a      	ldr	r2, [r7, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	f043 0307 	orr.w	r3, r3, #7
 8003118:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68fa      	ldr	r2, [r7, #12]
 800311e:	609a      	str	r2, [r3, #8]
}
 8003120:	bf00      	nop
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr

0800312c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800312c:	b480      	push	{r7}
 800312e:	b087      	sub	sp, #28
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003146:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	021a      	lsls	r2, r3, #8
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	431a      	orrs	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4313      	orrs	r3, r2
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 031f 	and.w	r3, r3, #31
 800317e:	2201      	movs	r2, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6a1a      	ldr	r2, [r3, #32]
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	43db      	mvns	r3, r3
 800318e:	401a      	ands	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1a      	ldr	r2, [r3, #32]
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	f003 031f 	and.w	r3, r3, #31
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	fa01 f303 	lsl.w	r3, r1, r3
 80031a4:	431a      	orrs	r2, r3
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	621a      	str	r2, [r3, #32]
}
 80031aa:	bf00      	nop
 80031ac:	371c      	adds	r7, #28
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
	...

080031b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b085      	sub	sp, #20
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e050      	b.n	8003272 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	4313      	orrs	r3, r2
 8003200:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1c      	ldr	r2, [pc, #112]	; (8003280 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d018      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800321c:	d013      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a18      	ldr	r2, [pc, #96]	; (8003284 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d00e      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a16      	ldr	r2, [pc, #88]	; (8003288 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d009      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a15      	ldr	r2, [pc, #84]	; (800328c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d004      	beq.n	8003246 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a13      	ldr	r2, [pc, #76]	; (8003290 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d10c      	bne.n	8003260 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800324c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68ba      	ldr	r2, [r7, #8]
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3714      	adds	r7, #20
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	40010000 	.word	0x40010000
 8003284:	40000400 	.word	0x40000400
 8003288:	40000800 	.word	0x40000800
 800328c:	40000c00 	.word	0x40000c00
 8003290:	40014000 	.word	0x40014000

08003294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80032b0:	bf00      	nop
 80032b2:	370c      	adds	r7, #12
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e03f      	b.n	800334e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fd fc64 	bl	8000bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f829 	bl	8003358 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}
	...

08003358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800335c:	b0bd      	sub	sp, #244	; 0xf4
 800335e:	af00      	add	r7, sp, #0
 8003360:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	68d9      	ldr	r1, [r3, #12]
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	ea40 0301 	orr.w	r3, r0, r1
 8003380:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	431a      	orrs	r2, r3
 8003390:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	431a      	orrs	r2, r3
 8003398:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	4313      	orrs	r3, r2
 80033a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80033a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033b0:	f021 010c 	bic.w	r1, r1, #12
 80033b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80033be:	430b      	orrs	r3, r1
 80033c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d2:	6999      	ldr	r1, [r3, #24]
 80033d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	ea40 0301 	orr.w	r3, r0, r1
 80033de:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033ea:	f040 81a5 	bne.w	8003738 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	4bcd      	ldr	r3, [pc, #820]	; (800372c <UART_SetConfig+0x3d4>)
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d006      	beq.n	8003408 <UART_SetConfig+0xb0>
 80033fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	4bcb      	ldr	r3, [pc, #812]	; (8003730 <UART_SetConfig+0x3d8>)
 8003402:	429a      	cmp	r2, r3
 8003404:	f040 80cb 	bne.w	800359e <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003408:	f7fe ffa0 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 800340c:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003410:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003414:	461c      	mov	r4, r3
 8003416:	f04f 0500 	mov.w	r5, #0
 800341a:	4622      	mov	r2, r4
 800341c:	462b      	mov	r3, r5
 800341e:	1891      	adds	r1, r2, r2
 8003420:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8003424:	415b      	adcs	r3, r3
 8003426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800342a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800342e:	1912      	adds	r2, r2, r4
 8003430:	eb45 0303 	adc.w	r3, r5, r3
 8003434:	f04f 0000 	mov.w	r0, #0
 8003438:	f04f 0100 	mov.w	r1, #0
 800343c:	00d9      	lsls	r1, r3, #3
 800343e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003442:	00d0      	lsls	r0, r2, #3
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	1911      	adds	r1, r2, r4
 800344a:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800344e:	416b      	adcs	r3, r5
 8003450:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	461a      	mov	r2, r3
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	1891      	adds	r1, r2, r2
 8003462:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8003466:	415b      	adcs	r3, r3
 8003468:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800346c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003470:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003474:	f7fc feb0 	bl	80001d8 <__aeabi_uldivmod>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4bad      	ldr	r3, [pc, #692]	; (8003734 <UART_SetConfig+0x3dc>)
 800347e:	fba3 2302 	umull	r2, r3, r3, r2
 8003482:	095b      	lsrs	r3, r3, #5
 8003484:	011e      	lsls	r6, r3, #4
 8003486:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800348a:	461c      	mov	r4, r3
 800348c:	f04f 0500 	mov.w	r5, #0
 8003490:	4622      	mov	r2, r4
 8003492:	462b      	mov	r3, r5
 8003494:	1891      	adds	r1, r2, r2
 8003496:	67b9      	str	r1, [r7, #120]	; 0x78
 8003498:	415b      	adcs	r3, r3
 800349a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800349c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80034a0:	1912      	adds	r2, r2, r4
 80034a2:	eb45 0303 	adc.w	r3, r5, r3
 80034a6:	f04f 0000 	mov.w	r0, #0
 80034aa:	f04f 0100 	mov.w	r1, #0
 80034ae:	00d9      	lsls	r1, r3, #3
 80034b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034b4:	00d0      	lsls	r0, r2, #3
 80034b6:	4602      	mov	r2, r0
 80034b8:	460b      	mov	r3, r1
 80034ba:	1911      	adds	r1, r2, r4
 80034bc:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80034c0:	416b      	adcs	r3, r5
 80034c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	1891      	adds	r1, r2, r2
 80034d4:	6739      	str	r1, [r7, #112]	; 0x70
 80034d6:	415b      	adcs	r3, r3
 80034d8:	677b      	str	r3, [r7, #116]	; 0x74
 80034da:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80034de:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80034e2:	f7fc fe79 	bl	80001d8 <__aeabi_uldivmod>
 80034e6:	4602      	mov	r2, r0
 80034e8:	460b      	mov	r3, r1
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <UART_SetConfig+0x3dc>)
 80034ec:	fba3 1302 	umull	r1, r3, r3, r2
 80034f0:	095b      	lsrs	r3, r3, #5
 80034f2:	2164      	movs	r1, #100	; 0x64
 80034f4:	fb01 f303 	mul.w	r3, r1, r3
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	3332      	adds	r3, #50	; 0x32
 80034fe:	4a8d      	ldr	r2, [pc, #564]	; (8003734 <UART_SetConfig+0x3dc>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	095b      	lsrs	r3, r3, #5
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800350c:	441e      	add	r6, r3
 800350e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003512:	4618      	mov	r0, r3
 8003514:	f04f 0100 	mov.w	r1, #0
 8003518:	4602      	mov	r2, r0
 800351a:	460b      	mov	r3, r1
 800351c:	1894      	adds	r4, r2, r2
 800351e:	66bc      	str	r4, [r7, #104]	; 0x68
 8003520:	415b      	adcs	r3, r3
 8003522:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003524:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003528:	1812      	adds	r2, r2, r0
 800352a:	eb41 0303 	adc.w	r3, r1, r3
 800352e:	f04f 0400 	mov.w	r4, #0
 8003532:	f04f 0500 	mov.w	r5, #0
 8003536:	00dd      	lsls	r5, r3, #3
 8003538:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800353c:	00d4      	lsls	r4, r2, #3
 800353e:	4622      	mov	r2, r4
 8003540:	462b      	mov	r3, r5
 8003542:	1814      	adds	r4, r2, r0
 8003544:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8003548:	414b      	adcs	r3, r1
 800354a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800354e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	461a      	mov	r2, r3
 8003556:	f04f 0300 	mov.w	r3, #0
 800355a:	1891      	adds	r1, r2, r2
 800355c:	6639      	str	r1, [r7, #96]	; 0x60
 800355e:	415b      	adcs	r3, r3
 8003560:	667b      	str	r3, [r7, #100]	; 0x64
 8003562:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8003566:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800356a:	f7fc fe35 	bl	80001d8 <__aeabi_uldivmod>
 800356e:	4602      	mov	r2, r0
 8003570:	460b      	mov	r3, r1
 8003572:	4b70      	ldr	r3, [pc, #448]	; (8003734 <UART_SetConfig+0x3dc>)
 8003574:	fba3 1302 	umull	r1, r3, r3, r2
 8003578:	095b      	lsrs	r3, r3, #5
 800357a:	2164      	movs	r1, #100	; 0x64
 800357c:	fb01 f303 	mul.w	r3, r1, r3
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	3332      	adds	r3, #50	; 0x32
 8003586:	4a6b      	ldr	r2, [pc, #428]	; (8003734 <UART_SetConfig+0x3dc>)
 8003588:	fba2 2303 	umull	r2, r3, r2, r3
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	f003 0207 	and.w	r2, r3, #7
 8003592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4432      	add	r2, r6
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	e26d      	b.n	8003a7a <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800359e:	f7fe fec1 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 80035a2:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80035aa:	461c      	mov	r4, r3
 80035ac:	f04f 0500 	mov.w	r5, #0
 80035b0:	4622      	mov	r2, r4
 80035b2:	462b      	mov	r3, r5
 80035b4:	1891      	adds	r1, r2, r2
 80035b6:	65b9      	str	r1, [r7, #88]	; 0x58
 80035b8:	415b      	adcs	r3, r3
 80035ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035bc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80035c0:	1912      	adds	r2, r2, r4
 80035c2:	eb45 0303 	adc.w	r3, r5, r3
 80035c6:	f04f 0000 	mov.w	r0, #0
 80035ca:	f04f 0100 	mov.w	r1, #0
 80035ce:	00d9      	lsls	r1, r3, #3
 80035d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035d4:	00d0      	lsls	r0, r2, #3
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	1911      	adds	r1, r2, r4
 80035dc:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80035e0:	416b      	adcs	r3, r5
 80035e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	461a      	mov	r2, r3
 80035ee:	f04f 0300 	mov.w	r3, #0
 80035f2:	1891      	adds	r1, r2, r2
 80035f4:	6539      	str	r1, [r7, #80]	; 0x50
 80035f6:	415b      	adcs	r3, r3
 80035f8:	657b      	str	r3, [r7, #84]	; 0x54
 80035fa:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035fe:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8003602:	f7fc fde9 	bl	80001d8 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4b4a      	ldr	r3, [pc, #296]	; (8003734 <UART_SetConfig+0x3dc>)
 800360c:	fba3 2302 	umull	r2, r3, r3, r2
 8003610:	095b      	lsrs	r3, r3, #5
 8003612:	011e      	lsls	r6, r3, #4
 8003614:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003618:	461c      	mov	r4, r3
 800361a:	f04f 0500 	mov.w	r5, #0
 800361e:	4622      	mov	r2, r4
 8003620:	462b      	mov	r3, r5
 8003622:	1891      	adds	r1, r2, r2
 8003624:	64b9      	str	r1, [r7, #72]	; 0x48
 8003626:	415b      	adcs	r3, r3
 8003628:	64fb      	str	r3, [r7, #76]	; 0x4c
 800362a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800362e:	1912      	adds	r2, r2, r4
 8003630:	eb45 0303 	adc.w	r3, r5, r3
 8003634:	f04f 0000 	mov.w	r0, #0
 8003638:	f04f 0100 	mov.w	r1, #0
 800363c:	00d9      	lsls	r1, r3, #3
 800363e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003642:	00d0      	lsls	r0, r2, #3
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	1911      	adds	r1, r2, r4
 800364a:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800364e:	416b      	adcs	r3, r5
 8003650:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	461a      	mov	r2, r3
 800365c:	f04f 0300 	mov.w	r3, #0
 8003660:	1891      	adds	r1, r2, r2
 8003662:	6439      	str	r1, [r7, #64]	; 0x40
 8003664:	415b      	adcs	r3, r3
 8003666:	647b      	str	r3, [r7, #68]	; 0x44
 8003668:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800366c:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8003670:	f7fc fdb2 	bl	80001d8 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4b2e      	ldr	r3, [pc, #184]	; (8003734 <UART_SetConfig+0x3dc>)
 800367a:	fba3 1302 	umull	r1, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	2164      	movs	r1, #100	; 0x64
 8003682:	fb01 f303 	mul.w	r3, r1, r3
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	00db      	lsls	r3, r3, #3
 800368a:	3332      	adds	r3, #50	; 0x32
 800368c:	4a29      	ldr	r2, [pc, #164]	; (8003734 <UART_SetConfig+0x3dc>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	095b      	lsrs	r3, r3, #5
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800369a:	441e      	add	r6, r3
 800369c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80036a0:	4618      	mov	r0, r3
 80036a2:	f04f 0100 	mov.w	r1, #0
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	1894      	adds	r4, r2, r2
 80036ac:	63bc      	str	r4, [r7, #56]	; 0x38
 80036ae:	415b      	adcs	r3, r3
 80036b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036b2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80036b6:	1812      	adds	r2, r2, r0
 80036b8:	eb41 0303 	adc.w	r3, r1, r3
 80036bc:	f04f 0400 	mov.w	r4, #0
 80036c0:	f04f 0500 	mov.w	r5, #0
 80036c4:	00dd      	lsls	r5, r3, #3
 80036c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036ca:	00d4      	lsls	r4, r2, #3
 80036cc:	4622      	mov	r2, r4
 80036ce:	462b      	mov	r3, r5
 80036d0:	1814      	adds	r4, r2, r0
 80036d2:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80036d6:	414b      	adcs	r3, r1
 80036d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	461a      	mov	r2, r3
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	1891      	adds	r1, r2, r2
 80036ea:	6339      	str	r1, [r7, #48]	; 0x30
 80036ec:	415b      	adcs	r3, r3
 80036ee:	637b      	str	r3, [r7, #52]	; 0x34
 80036f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80036f4:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036f8:	f7fc fd6e 	bl	80001d8 <__aeabi_uldivmod>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <UART_SetConfig+0x3dc>)
 8003702:	fba3 1302 	umull	r1, r3, r3, r2
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2164      	movs	r1, #100	; 0x64
 800370a:	fb01 f303 	mul.w	r3, r1, r3
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	3332      	adds	r3, #50	; 0x32
 8003714:	4a07      	ldr	r2, [pc, #28]	; (8003734 <UART_SetConfig+0x3dc>)
 8003716:	fba2 2303 	umull	r2, r3, r2, r3
 800371a:	095b      	lsrs	r3, r3, #5
 800371c:	f003 0207 	and.w	r2, r3, #7
 8003720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4432      	add	r2, r6
 8003728:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800372a:	e1a6      	b.n	8003a7a <UART_SetConfig+0x722>
 800372c:	40011000 	.word	0x40011000
 8003730:	40011400 	.word	0x40011400
 8003734:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	4bd1      	ldr	r3, [pc, #836]	; (8003a84 <UART_SetConfig+0x72c>)
 8003740:	429a      	cmp	r2, r3
 8003742:	d006      	beq.n	8003752 <UART_SetConfig+0x3fa>
 8003744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	4bcf      	ldr	r3, [pc, #828]	; (8003a88 <UART_SetConfig+0x730>)
 800374c:	429a      	cmp	r2, r3
 800374e:	f040 80ca 	bne.w	80038e6 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003752:	f7fe fdfb 	bl	800234c <HAL_RCC_GetPCLK2Freq>
 8003756:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800375a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800375e:	461c      	mov	r4, r3
 8003760:	f04f 0500 	mov.w	r5, #0
 8003764:	4622      	mov	r2, r4
 8003766:	462b      	mov	r3, r5
 8003768:	1891      	adds	r1, r2, r2
 800376a:	62b9      	str	r1, [r7, #40]	; 0x28
 800376c:	415b      	adcs	r3, r3
 800376e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003770:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003774:	1912      	adds	r2, r2, r4
 8003776:	eb45 0303 	adc.w	r3, r5, r3
 800377a:	f04f 0000 	mov.w	r0, #0
 800377e:	f04f 0100 	mov.w	r1, #0
 8003782:	00d9      	lsls	r1, r3, #3
 8003784:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003788:	00d0      	lsls	r0, r2, #3
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	eb12 0a04 	adds.w	sl, r2, r4
 8003792:	eb43 0b05 	adc.w	fp, r3, r5
 8003796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	4618      	mov	r0, r3
 800379e:	f04f 0100 	mov.w	r1, #0
 80037a2:	f04f 0200 	mov.w	r2, #0
 80037a6:	f04f 0300 	mov.w	r3, #0
 80037aa:	008b      	lsls	r3, r1, #2
 80037ac:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80037b0:	0082      	lsls	r2, r0, #2
 80037b2:	4650      	mov	r0, sl
 80037b4:	4659      	mov	r1, fp
 80037b6:	f7fc fd0f 	bl	80001d8 <__aeabi_uldivmod>
 80037ba:	4602      	mov	r2, r0
 80037bc:	460b      	mov	r3, r1
 80037be:	4bb3      	ldr	r3, [pc, #716]	; (8003a8c <UART_SetConfig+0x734>)
 80037c0:	fba3 2302 	umull	r2, r3, r3, r2
 80037c4:	095b      	lsrs	r3, r3, #5
 80037c6:	011e      	lsls	r6, r3, #4
 80037c8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037cc:	4618      	mov	r0, r3
 80037ce:	f04f 0100 	mov.w	r1, #0
 80037d2:	4602      	mov	r2, r0
 80037d4:	460b      	mov	r3, r1
 80037d6:	1894      	adds	r4, r2, r2
 80037d8:	623c      	str	r4, [r7, #32]
 80037da:	415b      	adcs	r3, r3
 80037dc:	627b      	str	r3, [r7, #36]	; 0x24
 80037de:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80037e2:	1812      	adds	r2, r2, r0
 80037e4:	eb41 0303 	adc.w	r3, r1, r3
 80037e8:	f04f 0400 	mov.w	r4, #0
 80037ec:	f04f 0500 	mov.w	r5, #0
 80037f0:	00dd      	lsls	r5, r3, #3
 80037f2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80037f6:	00d4      	lsls	r4, r2, #3
 80037f8:	4622      	mov	r2, r4
 80037fa:	462b      	mov	r3, r5
 80037fc:	1814      	adds	r4, r2, r0
 80037fe:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8003802:	414b      	adcs	r3, r1
 8003804:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	4618      	mov	r0, r3
 8003810:	f04f 0100 	mov.w	r1, #0
 8003814:	f04f 0200 	mov.w	r2, #0
 8003818:	f04f 0300 	mov.w	r3, #0
 800381c:	008b      	lsls	r3, r1, #2
 800381e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003822:	0082      	lsls	r2, r0, #2
 8003824:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8003828:	f7fc fcd6 	bl	80001d8 <__aeabi_uldivmod>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4b96      	ldr	r3, [pc, #600]	; (8003a8c <UART_SetConfig+0x734>)
 8003832:	fba3 1302 	umull	r1, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2164      	movs	r1, #100	; 0x64
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	3332      	adds	r3, #50	; 0x32
 8003844:	4a91      	ldr	r2, [pc, #580]	; (8003a8c <UART_SetConfig+0x734>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003850:	441e      	add	r6, r3
 8003852:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003856:	4618      	mov	r0, r3
 8003858:	f04f 0100 	mov.w	r1, #0
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	1894      	adds	r4, r2, r2
 8003862:	61bc      	str	r4, [r7, #24]
 8003864:	415b      	adcs	r3, r3
 8003866:	61fb      	str	r3, [r7, #28]
 8003868:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800386c:	1812      	adds	r2, r2, r0
 800386e:	eb41 0303 	adc.w	r3, r1, r3
 8003872:	f04f 0400 	mov.w	r4, #0
 8003876:	f04f 0500 	mov.w	r5, #0
 800387a:	00dd      	lsls	r5, r3, #3
 800387c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003880:	00d4      	lsls	r4, r2, #3
 8003882:	4622      	mov	r2, r4
 8003884:	462b      	mov	r3, r5
 8003886:	1814      	adds	r4, r2, r0
 8003888:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 800388c:	414b      	adcs	r3, r1
 800388e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	4618      	mov	r0, r3
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	f04f 0200 	mov.w	r2, #0
 80038a2:	f04f 0300 	mov.w	r3, #0
 80038a6:	008b      	lsls	r3, r1, #2
 80038a8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80038ac:	0082      	lsls	r2, r0, #2
 80038ae:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80038b2:	f7fc fc91 	bl	80001d8 <__aeabi_uldivmod>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4b74      	ldr	r3, [pc, #464]	; (8003a8c <UART_SetConfig+0x734>)
 80038bc:	fba3 1302 	umull	r1, r3, r3, r2
 80038c0:	095b      	lsrs	r3, r3, #5
 80038c2:	2164      	movs	r1, #100	; 0x64
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	011b      	lsls	r3, r3, #4
 80038cc:	3332      	adds	r3, #50	; 0x32
 80038ce:	4a6f      	ldr	r2, [pc, #444]	; (8003a8c <UART_SetConfig+0x734>)
 80038d0:	fba2 2303 	umull	r2, r3, r2, r3
 80038d4:	095b      	lsrs	r3, r3, #5
 80038d6:	f003 020f 	and.w	r2, r3, #15
 80038da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4432      	add	r2, r6
 80038e2:	609a      	str	r2, [r3, #8]
 80038e4:	e0c9      	b.n	8003a7a <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 80038e6:	f7fe fd1d 	bl	8002324 <HAL_RCC_GetPCLK1Freq>
 80038ea:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038ee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038f2:	461c      	mov	r4, r3
 80038f4:	f04f 0500 	mov.w	r5, #0
 80038f8:	4622      	mov	r2, r4
 80038fa:	462b      	mov	r3, r5
 80038fc:	1891      	adds	r1, r2, r2
 80038fe:	6139      	str	r1, [r7, #16]
 8003900:	415b      	adcs	r3, r3
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003908:	1912      	adds	r2, r2, r4
 800390a:	eb45 0303 	adc.w	r3, r5, r3
 800390e:	f04f 0000 	mov.w	r0, #0
 8003912:	f04f 0100 	mov.w	r1, #0
 8003916:	00d9      	lsls	r1, r3, #3
 8003918:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800391c:	00d0      	lsls	r0, r2, #3
 800391e:	4602      	mov	r2, r0
 8003920:	460b      	mov	r3, r1
 8003922:	eb12 0804 	adds.w	r8, r2, r4
 8003926:	eb43 0905 	adc.w	r9, r3, r5
 800392a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	4618      	mov	r0, r3
 8003932:	f04f 0100 	mov.w	r1, #0
 8003936:	f04f 0200 	mov.w	r2, #0
 800393a:	f04f 0300 	mov.w	r3, #0
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003944:	0082      	lsls	r2, r0, #2
 8003946:	4640      	mov	r0, r8
 8003948:	4649      	mov	r1, r9
 800394a:	f7fc fc45 	bl	80001d8 <__aeabi_uldivmod>
 800394e:	4602      	mov	r2, r0
 8003950:	460b      	mov	r3, r1
 8003952:	4b4e      	ldr	r3, [pc, #312]	; (8003a8c <UART_SetConfig+0x734>)
 8003954:	fba3 2302 	umull	r2, r3, r3, r2
 8003958:	095b      	lsrs	r3, r3, #5
 800395a:	011e      	lsls	r6, r3, #4
 800395c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003960:	4618      	mov	r0, r3
 8003962:	f04f 0100 	mov.w	r1, #0
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	1894      	adds	r4, r2, r2
 800396c:	60bc      	str	r4, [r7, #8]
 800396e:	415b      	adcs	r3, r3
 8003970:	60fb      	str	r3, [r7, #12]
 8003972:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003976:	1812      	adds	r2, r2, r0
 8003978:	eb41 0303 	adc.w	r3, r1, r3
 800397c:	f04f 0400 	mov.w	r4, #0
 8003980:	f04f 0500 	mov.w	r5, #0
 8003984:	00dd      	lsls	r5, r3, #3
 8003986:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800398a:	00d4      	lsls	r4, r2, #3
 800398c:	4622      	mov	r2, r4
 800398e:	462b      	mov	r3, r5
 8003990:	1814      	adds	r4, r2, r0
 8003992:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8003996:	414b      	adcs	r3, r1
 8003998:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800399c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f04f 0100 	mov.w	r1, #0
 80039a8:	f04f 0200 	mov.w	r2, #0
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	008b      	lsls	r3, r1, #2
 80039b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80039b6:	0082      	lsls	r2, r0, #2
 80039b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80039bc:	f7fc fc0c 	bl	80001d8 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4b31      	ldr	r3, [pc, #196]	; (8003a8c <UART_SetConfig+0x734>)
 80039c6:	fba3 1302 	umull	r1, r3, r3, r2
 80039ca:	095b      	lsrs	r3, r3, #5
 80039cc:	2164      	movs	r1, #100	; 0x64
 80039ce:	fb01 f303 	mul.w	r3, r1, r3
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	3332      	adds	r3, #50	; 0x32
 80039d8:	4a2c      	ldr	r2, [pc, #176]	; (8003a8c <UART_SetConfig+0x734>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039e4:	441e      	add	r6, r3
 80039e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039ea:	4618      	mov	r0, r3
 80039ec:	f04f 0100 	mov.w	r1, #0
 80039f0:	4602      	mov	r2, r0
 80039f2:	460b      	mov	r3, r1
 80039f4:	1894      	adds	r4, r2, r2
 80039f6:	603c      	str	r4, [r7, #0]
 80039f8:	415b      	adcs	r3, r3
 80039fa:	607b      	str	r3, [r7, #4]
 80039fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003a00:	1812      	adds	r2, r2, r0
 8003a02:	eb41 0303 	adc.w	r3, r1, r3
 8003a06:	f04f 0400 	mov.w	r4, #0
 8003a0a:	f04f 0500 	mov.w	r5, #0
 8003a0e:	00dd      	lsls	r5, r3, #3
 8003a10:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003a14:	00d4      	lsls	r4, r2, #3
 8003a16:	4622      	mov	r2, r4
 8003a18:	462b      	mov	r3, r5
 8003a1a:	1814      	adds	r4, r2, r0
 8003a1c:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8003a20:	414b      	adcs	r3, r1
 8003a22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f04f 0100 	mov.w	r1, #0
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	f04f 0300 	mov.w	r3, #0
 8003a3a:	008b      	lsls	r3, r1, #2
 8003a3c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003a40:	0082      	lsls	r2, r0, #2
 8003a42:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8003a46:	f7fc fbc7 	bl	80001d8 <__aeabi_uldivmod>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	460b      	mov	r3, r1
 8003a4e:	4b0f      	ldr	r3, [pc, #60]	; (8003a8c <UART_SetConfig+0x734>)
 8003a50:	fba3 1302 	umull	r1, r3, r3, r2
 8003a54:	095b      	lsrs	r3, r3, #5
 8003a56:	2164      	movs	r1, #100	; 0x64
 8003a58:	fb01 f303 	mul.w	r3, r1, r3
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	3332      	adds	r3, #50	; 0x32
 8003a62:	4a0a      	ldr	r2, [pc, #40]	; (8003a8c <UART_SetConfig+0x734>)
 8003a64:	fba2 2303 	umull	r2, r3, r2, r3
 8003a68:	095b      	lsrs	r3, r3, #5
 8003a6a:	f003 020f 	and.w	r2, r3, #15
 8003a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4432      	add	r2, r6
 8003a76:	609a      	str	r2, [r3, #8]
}
 8003a78:	e7ff      	b.n	8003a7a <UART_SetConfig+0x722>
 8003a7a:	bf00      	nop
 8003a7c:	37f4      	adds	r7, #244	; 0xf4
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a84:	40011000 	.word	0x40011000
 8003a88:	40011400 	.word	0x40011400
 8003a8c:	51eb851f 	.word	0x51eb851f

08003a90 <__libc_init_array>:
 8003a90:	b570      	push	{r4, r5, r6, lr}
 8003a92:	4d0d      	ldr	r5, [pc, #52]	; (8003ac8 <__libc_init_array+0x38>)
 8003a94:	4c0d      	ldr	r4, [pc, #52]	; (8003acc <__libc_init_array+0x3c>)
 8003a96:	1b64      	subs	r4, r4, r5
 8003a98:	10a4      	asrs	r4, r4, #2
 8003a9a:	2600      	movs	r6, #0
 8003a9c:	42a6      	cmp	r6, r4
 8003a9e:	d109      	bne.n	8003ab4 <__libc_init_array+0x24>
 8003aa0:	4d0b      	ldr	r5, [pc, #44]	; (8003ad0 <__libc_init_array+0x40>)
 8003aa2:	4c0c      	ldr	r4, [pc, #48]	; (8003ad4 <__libc_init_array+0x44>)
 8003aa4:	f000 f820 	bl	8003ae8 <_init>
 8003aa8:	1b64      	subs	r4, r4, r5
 8003aaa:	10a4      	asrs	r4, r4, #2
 8003aac:	2600      	movs	r6, #0
 8003aae:	42a6      	cmp	r6, r4
 8003ab0:	d105      	bne.n	8003abe <__libc_init_array+0x2e>
 8003ab2:	bd70      	pop	{r4, r5, r6, pc}
 8003ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ab8:	4798      	blx	r3
 8003aba:	3601      	adds	r6, #1
 8003abc:	e7ee      	b.n	8003a9c <__libc_init_array+0xc>
 8003abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac2:	4798      	blx	r3
 8003ac4:	3601      	adds	r6, #1
 8003ac6:	e7f2      	b.n	8003aae <__libc_init_array+0x1e>
 8003ac8:	08003b28 	.word	0x08003b28
 8003acc:	08003b28 	.word	0x08003b28
 8003ad0:	08003b28 	.word	0x08003b28
 8003ad4:	08003b2c 	.word	0x08003b2c

08003ad8 <memset>:
 8003ad8:	4402      	add	r2, r0
 8003ada:	4603      	mov	r3, r0
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d100      	bne.n	8003ae2 <memset+0xa>
 8003ae0:	4770      	bx	lr
 8003ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8003ae6:	e7f9      	b.n	8003adc <memset+0x4>

08003ae8 <_init>:
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aea:	bf00      	nop
 8003aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003aee:	bc08      	pop	{r3}
 8003af0:	469e      	mov	lr, r3
 8003af2:	4770      	bx	lr

08003af4 <_fini>:
 8003af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af6:	bf00      	nop
 8003af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003afa:	bc08      	pop	{r3}
 8003afc:	469e      	mov	lr, r3
 8003afe:	4770      	bx	lr
